jobs:
  - job: ubuntu1604
    displayName: Ubuntu 16.04
    timeoutInMinutes: 0
    variables:
      BUILD_DIR: '$(Agent.WorkFolder)/build'
      DEPS_DIR: '$(Agent.WorkFolder)/deps'
      platform: x64
    strategy:
      maxParallel: 8
      matrix:
        Debug clang:
          configuration: Debug
          compiler: clang++
        Release clang:
          configuration: Release
          compiler: clang++
        Debug gcc:
          configuration: Debug
          compiler: g++
        Release gcc:
          configuration: Release
          compiler: g++
        Coverage gcc:
          configuration: Coverage
          compiler: g++
    pool:
      vmImage: 'Ubuntu 16.04'
    steps:
      - script: |
          # Install LCOV
          if [ "$(configuration)" = "Coverage" ] 
          then
            sudo apt-get install lcov
          fi
          # Install flatbuffers
          cd $DEPS_DIR
          git clone https://github.com/google/flatbuffers.git
          cd flatbuffers && mkdir -p flatbuffer_build && cd flatbuffer_build
          cmake -DCMAKE_BUILD_TYPE=Release ..
          sudo make -j8 install
          # Install Zeromq
          cd $DEPS_DIR
          git clone https://github.com/zeromq/libzmq.git
          cd libzmq && mkdir -p libzmq_build && cd libzmq_build
          cmake -DCMAKE_BUILD_TYPE=Release -DENABLE_CURVE=OFF -DZMQ_BUILD_TESTS=OFF ..
          sudo make -j8 install
          # Install Doxygen
          sudo apt-get install doxygen
        displayName: 'Install Dependencies'
      - script: |
          mkdir -p $BUILD_DIR && cd $BUILD_DIR
          if [ "$(configuration)" = "Coverage" ] 
          then
            lcov --directory . --zerocounters
          fi
          export CXX='$(compiler)'
          cmake $(Build.SourcesDirectory) \
            -DCMAKE_BUILD_TYPE=$(configuration) \
            -DSIMPLE_BUILD_TESTS=ON \
            -DSIMPLE_BUILD_EXAMPLES=ON \
            -DSIMPLE_BUILD_DOC=ON
        displayName: 'CMake Configuration'
      - script: |
          cd $BUILD_DIR
          make -j8
        displayName: 'Build'
      - script: |
          cd $BUILD_DIR
          ctest -R simple_tests -C $(configuration) -T Test
        displayName: 'Run Unit Tests'
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'CTest'
          testResultsFiles: '**/Test.xml'
          searchFolder: '$(Agent.WorkFolder)/build'
        condition: succeededOrFailed()
      - script: |
          if [ "$(configuration)" = "Coverage" ] 
          then
            # Generate code coverage information
            cd $BUILD_DIR
            lcov --capture --directory . --output-file coverage.xml
            lcov --remove coverage.xml 'tests/*' 'tests/include/*' 'msgs/include/simple_msgs/generated/*' '/usr/*' --output-file coverage.xml
            lcov --list coverage.xml
            bash <(curl https://codecov.io/bash) -t a013a685-a504-45a3-a38d-d35124257827 -f "coverage.xml" -R .. -s . -X gcov fix || echo "Codecov did not collect coverage reports"
          fi
        displayName: 'Code Coverage'
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Agent.WorkFolder)/build/coverage.xml'
          reportDirectory: '$(Agent.WorkFolder)/build/htmlcov'
