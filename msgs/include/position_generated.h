// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSITION_SIMPLE_H_
#define FLATBUFFERS_GENERATED_POSITION_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace simple {

struct Vec3;

struct quaternion;

struct position;

MANUALLY_ALIGNED_STRUCT(8) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(double _x, double _y, double _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
STRUCT_END(Vec3, 24);

MANUALLY_ALIGNED_STRUCT(8) quaternion FLATBUFFERS_FINAL_CLASS {
 private:
  double e1_;
  double e2_;
  double e3_;
  double e4_;

 public:
  quaternion() {
    memset(this, 0, sizeof(quaternion));
  }
  quaternion(double _e1, double _e2, double _e3, double _e4)
      : e1_(flatbuffers::EndianScalar(_e1)),
        e2_(flatbuffers::EndianScalar(_e2)),
        e3_(flatbuffers::EndianScalar(_e3)),
        e4_(flatbuffers::EndianScalar(_e4)) {
  }
  double e1() const {
    return flatbuffers::EndianScalar(e1_);
  }
  double e2() const {
    return flatbuffers::EndianScalar(e2_);
  }
  double e3() const {
    return flatbuffers::EndianScalar(e3_);
  }
  double e4() const {
    return flatbuffers::EndianScalar(e4_);
  }
};
STRUCT_END(quaternion, 32);

struct position FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_VECTOR = 4,
    VT_ORIENTATION = 6,
    VT_HEADER = 8
  };
  uint8_t vector() const {
    return GetField<uint8_t>(VT_VECTOR, 0);
  }
  uint8_t orientation() const {
    return GetField<uint8_t>(VT_ORIENTATION, 0);
  }
  uint8_t Header() const {
    return GetField<uint8_t>(VT_HEADER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_VECTOR) &&
           VerifyField<uint8_t>(verifier, VT_ORIENTATION) &&
           VerifyField<uint8_t>(verifier, VT_HEADER) &&
           verifier.EndTable();
  }
};

struct positionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_vector(uint8_t vector) {
    fbb_.AddElement<uint8_t>(position::VT_VECTOR, vector, 0);
  }
  void add_orientation(uint8_t orientation) {
    fbb_.AddElement<uint8_t>(position::VT_ORIENTATION, orientation, 0);
  }
  void add_Header(uint8_t Header) {
    fbb_.AddElement<uint8_t>(position::VT_HEADER, Header, 0);
  }
  explicit positionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  positionBuilder &operator=(const positionBuilder &);
  flatbuffers::Offset<position> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<position>(end);
    return o;
  }
};

inline flatbuffers::Offset<position> Createposition(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t vector = 0,
    uint8_t orientation = 0,
    uint8_t Header = 0) {
  positionBuilder builder_(_fbb);
  builder_.add_Header(Header);
  builder_.add_orientation(orientation);
  builder_.add_vector(vector);
  return builder_.Finish();
}

inline const simple::position *Getposition(const void *buf) {
  return flatbuffers::GetRoot<simple::position>(buf);
}

inline const char *positionIdentifier() {
  return "PSTN";
}

inline bool positionBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, positionIdentifier());
}

inline bool VerifypositionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::position>(positionIdentifier());
}

inline void FinishpositionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::position> root) {
  fbb.Finish(root, positionIdentifier());
}

}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_POSITION_SIMPLE_H_
