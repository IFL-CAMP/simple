// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INT_SIMPLE_H_
#define FLATBUFFERS_GENERATED_INT_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace simple {

struct IntFbs;

struct IntFbs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  int32_t data() const {
    return GetField<int32_t>(VT_DATA, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DATA) &&
           verifier.EndTable();
  }
};

struct IntFbsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(int32_t data) {
    fbb_.AddElement<int32_t>(IntFbs::VT_DATA, data, 0);
  }
  explicit IntFbsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IntFbsBuilder &operator=(const IntFbsBuilder &);
  flatbuffers::Offset<IntFbs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IntFbs>(end);
    return o;
  }
};

inline flatbuffers::Offset<IntFbs> CreateIntFbs(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t data = 0) {
  IntFbsBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline const simple::IntFbs *GetIntFbs(const void *buf) {
  return flatbuffers::GetRoot<simple::IntFbs>(buf);
}

inline const char *IntFbsIdentifier() {
  return "INTF";
}

inline bool IntFbsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, IntFbsIdentifier());
}

inline bool VerifyIntFbsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::IntFbs>(IntFbsIdentifier());
}

inline void FinishIntFbsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::IntFbs> root) {
  fbb.Finish(root, IntFbsIdentifier());
}

}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_INT_SIMPLE_H_
