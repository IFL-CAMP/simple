/**
 * S.I.M.P.L.E. - Smart Intuitive Messaging Platform with Less Effort
 * Copyright (C) 2018 Salvatore Virga - salvo.virga@tum.de, Fernanda Levy Langsch - fernanda.langsch@tum.de
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser Public License for more details.
 *
 * You should have received a copy of the GNU Lesser Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef SIMPLE_MSGS_POSE_H
#define SIMPLE_MSGS_POSE_H

#include <ostream>

#include "generated/pose_generated.h"
#include "point.h"
#include "quaternion.h"

namespace simple_msgs {
/**
 * @class Pose pose.h.
 * @brief Wrapper for a Flatbuffers Pose message.
 * It represents a Pose in 3D space by its position and orientation.
 */
class Pose : public GenericMessage {
public:
  Pose() = default;

  /**
   * @brief Construct a Pose message given its position and orientation.
   */
  Pose(const Point&, const Quaternion&);

  /**
   * @brief Construct a Pose message given its position and orientation.
   */
  Pose(Point&&, Quaternion&&);

  /**
   * @brief Construct a Pose message using a raw memory coming from network.
   */
  Pose(const void*);

  /**
   * @brief Copy constructor.
   */
  Pose(const Pose&);

  /**
   * @brief Move constructor.
   */
  Pose(Pose&&) noexcept;

  /**
   * @brief Copy assignment operator.
   */
  Pose& operator=(const Pose&);

  /**
   * @brief Move assignment operator.
   */
  Pose& operator=(Pose&&) noexcept;

  /**
   * @brief Copy assignment operator that uses raw memory coming from the network.
   */
  Pose& operator=(std::shared_ptr<void*>);

  /**
   * @brief Returns true if lhs is equal to rhs, false otherwise.
   */
  inline bool operator==(const Pose& rhs) const {
    return (position_ == rhs.position_ && quaternion_ == rhs.quaternion_);
  }

  /**
   * @brief Returns true if lhs is not equal to rhs, false otherwise.
   */
  inline bool operator!=(const Pose& rhs) const { return !(*this == rhs); }

  /**
   * @brief Stream extraction operator.
   */
  friend std::ostream& operator<<(std::ostream&, const Pose&);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   */
  std::shared_ptr<flatbuffers::DetachedBuffer> getBufferData() const override;

  /**
   * @brief Returns the translational part of the Pose as a Point message.
   */
  inline Point& getPosition() { return position_; }

  /**
   * @brief Returns the translational part of the Pose as a Point message.
   */
  inline const Point& getPosition() const { return position_; }

  /**
   * @brief Returns the rotational part of the Pose as a Quaternion message.
   */
  inline Quaternion& getQuaternion() { return quaternion_; }

  /**
   * @brief Returns the rotational part of the Pose as a Quaternion message.
   */
  inline const Quaternion& getQuaternion() const { return quaternion_; }

  /**
   * @brief Modifies the rotational part of the Pose.
   */
  void setPosition(const Point&);

  /**
   * @brief Modifies the translational part of the Pose.
   */
  void setQuaternion(const Quaternion&);

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static inline std::string getTopic() { return PoseFbsIdentifier(); }

private:
  Point position_{};         //! Translational part.
  Quaternion quaternion_{};  //! Rotational part.
};
}  // Namespace simple_msgs.

#endif  // SIMPLE_MSGS_POSE_H
