#pragma once

#include <iostream>

#include "generated/pose_generated.h"
#include "quaternion.h"
#include "point.h"

namespace simple_msgs
{
class Pose : public GenericMessage
{
public:
  Pose();
  Pose(const Point&, const Quaternion&);
  Pose(const uint8_t*);
  Pose(const Pose&);
  Pose(Pose&&);

  Pose& operator=(const Pose&);
  Pose& operator=(Pose&&);
  Pose& operator=(const uint8_t*);

  bool operator==(const Pose&) const;
  bool operator!=(const Pose&) const;

  friend std::ostream& operator<<(std::ostream&, const Pose&);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const;

  /**
   * @brief Returns the translational part of the Pose as a Point message.
   */
  Point getPosition() const { return position_; }
  /**
   * @brief Returns the rotational part of the Pose as a Quaternion message.
   */
  Quaternion getQuaternion() const { return quaternion_; }
  /**
   * @brief Modifies the rotational part of the Pose.
   */
  void setPosition(const Point&);

  /**
   * @brief Modifies the translational part of the Pose.
   */
  void setQuaternion(const Quaternion&);

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return PoseFbsIdentifier(); }
private:
  Quaternion quaternion_;
  Point position_;
};
}  // Namespace simple_msgs.
