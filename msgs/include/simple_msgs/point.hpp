/**
 * S.I.M.P.L.E. - Smart Intuitive Messaging Platform with Less Effort
 * Copyright (C) 2018 Salvatore Virga - salvo.virga@tum.de, Fernanda Levy
 * Langsch - fernanda.langsch@tum.de
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

#ifndef SIMPLE_MSGS_POINT_H
#define SIMPLE_MSGS_POINT_H

#include <array>
#include <mutex>
#include <ostream>

#include "generic_message.hpp"

namespace simple_msgs {
/**
 * @class Point point.hpp.
 * @brief Thread-safe wrapper for a Flatbuffers Point message.
 * It represents a 3D Point by its x, y and z coordinates.
 */
class Point : public GenericMessage {
public:
  Point() = default;

  /**
   * @brief Construct a Point message, all the point coordinates are set to the given parameter.
   */
  Point(double value);

  /**
   * @brief Construct a Point message using the given parameters.
   */
  Point(double x, double y, double z);

  /**
   * @brief Copy construct a Point message using the given 3D array.
   */
  Point(const std::array<double, 3>& array);

  /**
   * @brief Move construct a Point message using the given 3D array.
   */
  Point(std::array<double, 3>&& array) noexcept;

  /**
   * @brief Copy constructor.
   */
  Point(const Point& other);

  /**
   * @brief Move constructor.
   */
  Point(Point&& other) noexcept;

  /**
   * @brief Copy assignment operator.
   */
  Point& operator=(const Point& rhs);

  /**
   * @brief Move assignment operator.
   */
  Point& operator=(Point&& rhs) noexcept;

  /**
   * @brief Copy assignment from a 3D array.
   */
  Point& operator=(const std::array<double, 3>& rhs);

  /**
   * @brief Move assignment from a 3D array.
   */
  Point& operator=(std::array<double, 3>&& rhs) noexcept;

  /**
   * @brief Returns true if lhs is equal to rhs, false otherwise.
   */
  inline bool operator==(const Point& rhs) const {
    std::lock_guard<std::mutex> lock{mutex_};
    return data_ == rhs.data_;
  }

  /**
   * @brief Returns true if lhs is not equal to rhs, false otherwise.
   */
  inline bool operator!=(const Point& rhs) const { return !(*this == rhs); }

  /**
   * @brief Stream extraction operator.
   */
  friend std::ostream& operator<<(std::ostream& out, const Point& p);

  /**
   * @brief Prefix increment operator.
   */
  Point& operator++();

  /**
   * @brief Postfix increment operator.
   */
  Point operator++(int);

  /**
   * @brief Prefix decrement operator.
   */
  Point& operator--();

  /**
   * @brief Postfix decrement operator.
   */
  Point operator--(int);

  /**
   * @brief Addition operator.
   */
  Point& operator+=(const Point& rhs);

  /**
   * @brief Addition operator.
   */
  friend Point operator+(Point lhs, const Point& rhs);

  /**
   * @brief Subtraction operator.
   */
  Point& operator-=(const Point& rhs);

  /**
   * @brief Subtraction operator.
   */
  friend Point operator-(Point lhs, const Point& rhs);

  /**
   * @brief Multiplication operator.
   */
  Point& operator*=(const Point& rhs);

  /**
   * @brief Multiplication operator.
   */
  friend Point operator*(Point lhs, const Point& rhs);

  /**
   * @brief Division operator.
   */
  Point& operator/=(const Point& rhs);

  /**
   * @brief Division operator.
   */
  friend Point operator/(Point lhs, const Point& rhs);

  /**
   * @brief Returns the point as an array of 3 elements.
   */
  inline std::array<double, 3> toVector() const {
    std::lock_guard<std::mutex> lock{mutex_};
    return data_;
  }
  /**
   * @brief Returns of the x point coordinate.
   */
  inline double getX() const {
    std::lock_guard<std::mutex> lock{mutex_};
    return data_[0];
  }
  /**
   * @brief Returns of the y point coordinate.
   */
  inline double getY() const {
    std::lock_guard<std::mutex> lock{mutex_};
    return data_[1];
  }
  /**
   * @brief Returns of the z point coordinate.
   */
  inline double getZ() const {
    std::lock_guard<std::mutex> lock{mutex_};
    return data_[2];
  }
  /**
   * @brief Modifies the x coordinate of the point.
   */
  void setX(double x);

  /**
   * @brief Modifies the y coordinate of the point.
   */
  void setY(double y);

  /**
   * @brief Modifies the z coordinate of the point.
   */
  void setZ(double z);

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static std::string getTopic();

protected:
  /**
   * @brief Construct a Point message using a raw memory coming from network.
   */
  Point(const void* data);

  /**
   * @brief Copy assignment operator that uses raw memory coming from the network.
   */
  Point& operator=(std::shared_ptr<void*> rhs) override;

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   */
  std::shared_ptr<flatbuffers::DetachedBuffer> getBufferData() const override;

  friend class Pose;
  friend class PointStamped;
  friend class Transform;

private:
  //! Thread safe copy and move constructors.
  Point(const Point& other, const std::lock_guard<std::mutex>&);
  Point(Point&& other, const std::lock_guard<std::mutex>&) noexcept;

  mutable std::mutex mutex_{};
  std::array<double, 3> data_{{0, 0, 0}};
};
}  // Namespace simple_msgs.

#endif  // SIMPLE_MSGS_POINT_H
