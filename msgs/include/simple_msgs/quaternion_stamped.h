#pragma once

#include <array>
#include <iostream>

#include "generic_message.h"
#include "quaternion.h"
#include "header.h"
#include "generated/quaternion_stamped_generated.h"

namespace simple_msgs
{
/**
 * @brief Quaternion: wrapper class around the QuaternionFbs generated code from flatbuffers.
 */
class QuaternionStamped : public GenericMessage
{
public:
  QuaternionStamped();
  QuaternionStamped(Quaternion, Header);
  QuaternionStamped(const uint8_t*);
  QuaternionStamped(const QuaternionStamped&);
  QuaternionStamped(QuaternionStamped&&);

  QuaternionStamped& operator=(const QuaternionStamped&);
  QuaternionStamped& operator=(QuaternionStamped&&);
  QuaternionStamped& operator=(const uint8_t*);

  bool operator==(const QuaternionStamped&) const;
  bool operator!=(const QuaternionStamped&) const;

  friend std::ostream& operator<<(std::ostream&, const QuaternionStamped&);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   */
  uint8_t* getBufferData() const override;

  /**
   * @brief Returns the quaternion.
   * @return
   */
  Quaternion getQuaternion() const { return quaternion_; }

  /**
  * @brief Returns the header.
  * @return
  */
  Header getHeader() const { return header_; }

  /**
   * @brief Modifies the quaternion.
   */
  inline void setQuaternion(const Quaternion& quaternion) { quaternion_ = quaternion; }

  /**
   * @brief Modifies the header.
   */
  inline void setHeader(const Header& header) { header_ =header; }

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return QuaternionStampedFbsIdentifier(); }

private:
  Quaternion quaternion_{};
  Header header_{};
};
}  // Namespace simple_msgs.
