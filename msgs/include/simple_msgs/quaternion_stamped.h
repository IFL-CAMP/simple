/**
 * S.I.M.P.L.E. - Smart Intuitive Messaging Platform with Less Effort
 * Copyright (C) 2018 Salvatore Virga - salvo.virga@tum.de, Fernanda Levy
 * Langsch - fernanda.langsch@tum.de
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

#ifndef SIMPLE_MSGS_QUATERNION_STAMPED_H
#define SIMPLE_MSGS_QUATERNION_STAMPED_H

#include <array>
#include <iostream>

#include "generated/quaternion_stamped_generated.h"
#include "generic_message.h"
#include "header.h"
#include "quaternion.h"

namespace simple_msgs {
/**
 * @brief Quaternion: wrapper class around the QuaternionFbs generated code from flatbuffers.
 */
class QuaternionStamped : public GenericMessage {
public:
  QuaternionStamped() = default;
  QuaternionStamped(const Header&, const Quaternion&);
  QuaternionStamped(Header&&, Quaternion&&);
  QuaternionStamped(const void*);
  QuaternionStamped(const QuaternionStamped&);
  QuaternionStamped(QuaternionStamped&&) noexcept;

  QuaternionStamped& operator=(const QuaternionStamped&);
  QuaternionStamped& operator=(QuaternionStamped&&) noexcept;
  QuaternionStamped& operator=(std::shared_ptr<void*>);

  inline bool operator==(const QuaternionStamped& rhs) const {
    return (quaternion_ == rhs.quaternion_ && header_ == rhs.header_);
  }
  inline bool operator!=(const QuaternionStamped& rhs) const { return !(*this == rhs); }
  friend std::ostream& operator<<(std::ostream&, const QuaternionStamped&);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   */
  std::shared_ptr<flatbuffers::DetachedBuffer> getBufferData() const override;

  /**
   * @brief Returns the message Hader.
   */
  inline Header& getHeader() { return header_; }
  inline const Header& getHeader() const { return header_; }

  /**
   * @brief Returns the message Quaternion.
   * @return
   */
  inline Quaternion& getQuaternion() { return quaternion_; }
  inline const Quaternion& getQuaternion() const { return quaternion_; }

  /**
   * @brief Modifies the message Header.
   */
  void setHeader(const Header&);

  /**
   * @brief Modifies the message Quaternion.
   */
  void setQuaternion(const Quaternion&);

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */

  static inline std::string getTopic() { return QuaternionStampedFbsIdentifier(); }

private:
  Header header_{};
  Quaternion quaternion_{};
};
}  // Namespace simple_msgs.

#endif  // SIMPLE_MSGS_QUATERNION_STAMPED_H
