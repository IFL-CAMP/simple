#pragma once

#include <array>
#include <ostream>
#include "point.h"
#include "header.h"
#include "generic_message.h"
#include "generated/point_stamped_generated.h"

namespace simple_msgs
{
/**
 * @brief Point: wrapper class around the PointFbs generated code from flatbuffers.
 */
class PointStamped : public GenericMessage
{
public:
  PointStamped();
  PointStamped(const Point& point, const Header& header);
  PointStamped(const uint8_t*);
  PointStamped(const PointStamped&);
  PointStamped(PointStamped&&);

  PointStamped& operator=(const PointStamped&);
  PointStamped& operator=(PointStamped&&);
  PointStamped& operator=(const uint8_t*);

  bool operator==(const PointStamped&) const;
  bool operator!=(const PointStamped&) const;

  friend std::ostream& operator<<(std::ostream&, const PointStamped&);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const;

  /**
   * @brief Returns the point as an array of 3 elements.
   */
  Point getPoint() const { return point_; }
  /**
   * @brief Returns the point as an array of 3 elements.
   */
  Header getHeader() const { return header_; }
  
  /**
   * @brief Set the header
   */
  inline void setHeader(const Header& h) { header_ = h; }

  /**
   * @brief Set the point
   */
  inline void setPoint(const Point& p) { point_ = p; }

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return PointStampedFbsIdentifier(); }

private:
  Point point_{};
  Header header_{};
};
}  // Namespace simple_msgs.
