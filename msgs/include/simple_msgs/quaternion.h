#pragma once

#include <array>
#include <iostream>

#include "generic_message.h"
#include "generated/quaternion_generated.h"

namespace simple_msgs
{
/**
 * @brief Quaternion: wrapper class around the QuaternionFbs generated code from flatbuffers.
 */
class Quaternion : public GenericMessage
{
public:
  Quaternion();
  Quaternion(double, double, double, double);
  Quaternion(const std::array<double, 4>&);
  Quaternion(std::array<double, 4>&&);
  Quaternion(const uint8_t*);
  Quaternion(const Quaternion&);
  Quaternion(Quaternion&&);

  Quaternion& operator=(const Quaternion&);
  Quaternion& operator=(Quaternion&&);
  Quaternion& operator=(const uint8_t*);
  Quaternion& operator=(const std::array<double, 4>&);
  Quaternion& operator=(std::array<double, 4>&&);

  bool operator==(const Quaternion&) const;
  bool operator!=(const Quaternion&) const;

  friend std::ostream& operator<<(std::ostream&, const Quaternion&);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   */
  uint8_t* getBufferData() const override;

  /**
   * @brief Returns the quaternion as an array for 4 elements.
   * @return
   */
  std::array<double, 4> toVector() const { return data_; }
  /**
   * @brief Returns of the x quaternion component.
   */
  double getX() const { return data_[0]; }
  /**
   * @brief Returns of the y quaternion component.
   */
  double getY() const { return data_[1]; }
  /**
   * @brief Returns of the z quaternion component.
   */
  double getZ() const { return data_[2]; }
  /**
   * @brief Returns of the w quaternion component.
   */
  double getW() const { return data_[3]; }
  /**
   * @brief Modifies the x component of the quaternion.
   */
  void setX(double);

  /**
   * @brief Modifies the y component of the quaternion.
   */
  void setY(double);

  /**
   * @brief Modifies the z component of the quaternion.
   */
  void setZ(double);

  /**
   * @brief Modifies the w component of the quaternion.
   */
  void setW(double);

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return QuaternionFbsIdentifier(); }
private:
  std::array<double, 4> data_{{0, 0, 0, 0}};
};
}  // Namespace simple_msgs.
