#pragma once

#include <array>
#include "generic_message.h"
#include "quaternion_generated.h"

namespace simple_msgs
{
/**
 * @brief Quaternion: wrapper class around the QuaternionFbs generated code from flatbuffers.
 */
class Quaternion : public GenericMessage
{
public:
  Quaternion()
    : GenericMessage()
  {
  }

  /**
   * @brief Constructor from the individual data.
   * @param bufferPointer
   */
  /**
   * @brief Constructor from the individual data.
   * @param x: x components of the Quaternion.
   * @param y: y components of the Quaternion.
   * @param z: z components of the Quaternion.
   * @param w: w components of the Quaternion.
   */
  Quaternion(double x, double y, double z, double w)
    : x_(x)
    , y_(y)
    , z_(z)
    , w_(w)
  {
  }

  /**
   * @brief Constructor from the buffer data.
   * @param data acquired from flatbuffer.
   */
  Quaternion(const uint8_t* data);

  /**
   * @brief Copy constructor.
   */
  Quaternion(const Quaternion& q)
    : Quaternion(q.x_, q.y_, q.z_, q.w_)
  {
  }

  /**
   * @brief Copy assignment.
   */
  Quaternion& operator=(const Quaternion& q);

  /**
   * @brief operator==
   */
  bool operator==(const Quaternion& q) const;

  /**
   * @brief operator!=
   */
  bool operator!=(const Quaternion& q) const;

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   */
  uint8_t* getBufferData() const override;

  /**
   * @brief Returns the quaternion as an array for 4 elements.
   * @return
   */
  std::array<double, 4> toVector() const { return std::array<double, 4>{x_, y_, z_, w_}; }

  /**
   * @brief Returns of the x quaternion component.
   */
  double getX() const { return x_; }

  /**
   * @brief Returns of the y quaternion component.
   */
  double getY() const { return y_; }

  /**
   * @brief Returns of the z quaternion component.
   */
  double getZ() const { return z_; }

  /**
   * @brief Returns of the w quaternion component.
   */
  double getW() const { return w_; }

  /**
   * @brief Modifies the quaternion given an array of 4 elements.
   */
  void fromVector(const std::array<double, 4>& q);

  /**
   * @brief Modifies the x component of the quaternion.
   */
  void setX(double x);

  /**
   * @brief Modifies the y component of the quaternion.
   */
  void setY(double y);

  /**
   * @brief Modifies the z component of the quaternion.
   */
  void setZ(double z);

  /**
   * @brief Modifies the w component of the quaternion.
   */
  void setW(double w);

  /**
   * @brief Rerturns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return QuaternionFbsIdentifier(); }

private:
  double x_, y_, z_, w_;
};
}  // namespace simple_msgs
