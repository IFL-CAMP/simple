/**
 * S.I.M.P.L.E. - Smart Intuitive Messaging Platform with Less Effort
 * Copyright (C) 2018 Salvatore Virga - salvo.virga@tum.de, Fernanda Levy
 * Langsch - fernanda.langsch@tum.de
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

#ifndef SIMPLE_MSGS_QUATERNION_H
#define SIMPLE_MSGS_QUATERNION_H

#include <array>
#include <iostream>

#include "generated/quaternion_generated.h"
#include "generic_message.h"

namespace simple_msgs {
/**
 * @brief Quaternion: wrapper class around the QuaternionFbs generated code from flatbuffers.
 */
class Quaternion : public GenericMessage {
public:
  Quaternion() = default;
  Quaternion(double, double, double, double);
  Quaternion(const std::array<double, 4>&);
  Quaternion(std::array<double, 4>&&) noexcept;
  Quaternion(const void*);
  Quaternion(const Quaternion&);
  Quaternion(Quaternion&&) noexcept;

  Quaternion& operator=(const Quaternion&);
  Quaternion& operator=(Quaternion&&) noexcept;
  Quaternion& operator=(std::shared_ptr<void*>);
  Quaternion& operator=(const std::array<double, 4>&);
  Quaternion& operator=(std::array<double, 4>&&) noexcept;

  inline bool operator==(const Quaternion& rhs) const { return data_ == rhs.data_; }
  inline bool operator!=(const Quaternion& rhs) const { return !(*this == rhs); }
  friend std::ostream& operator<<(std::ostream&, const Quaternion&);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   */
  std::shared_ptr<flatbuffers::DetachedBuffer> getBufferData() const override;

  /**
   * @brief Returns the quaternion as an array for 4 elements.
   * @return
   */
  std::array<double, 4> toVector() const { return data_; }
  /**
   * @brief Returns of the x quaternion component.
   */
  double getX() const { return data_[0]; }
  /**
   * @brief Returns of the y quaternion component.
   */
  double getY() const { return data_[1]; }
  /**
   * @brief Returns of the z quaternion component.
   */
  double getZ() const { return data_[2]; }
  /**
   * @brief Returns of the w quaternion component.
   */
  double getW() const { return data_[3]; }
  /**
   * @brief Modifies the x component of the quaternion.
   */
  void setX(double);

  /**
   * @brief Modifies the y component of the quaternion.
   */
  void setY(double);

  /**
   * @brief Modifies the z component of the quaternion.
   */
  void setZ(double);

  /**
   * @brief Modifies the w component of the quaternion.
   */
  void setW(double);

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static inline std::string getTopic() { return QuaternionFbsIdentifier(); }

private:
  std::array<double, 4> data_{{0, 0, 0, 1}};
};
}  // Namespace simple_msgs.

#endif  // SIMPLE_MSGS_QUATERNION_H
