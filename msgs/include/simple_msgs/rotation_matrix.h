/**
* S.I.M.P.L.E. - Smart Intra-operative Messaging Platform with Less Effort
* Copyright (C) 2018 Salvatore Virga - salvo.virga@tum.de, Fernanda Levy Langsch - fernanda.langsch@tum.de
*
* This program is free software: you can redistribute it and/or modify
* it under the terms of the GNU Lesser Public License as published by
* the Free Software Foundation, either version 3 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser Public License for more details.
*
* You should have received a copy of the GNU Lesser Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#pragma once

#include <array>
#include <iostream>

#include "generic_message.h"
#include "generated/rotation_matrix_generated.h"

namespace simple_msgs
{
/**
 * @brief RotationMatrix: wrapper class around the RotationMatrixFbs generated code from flatbuffers.
 * The matrix is stored row-wise
 */
class RotationMatrix : public GenericMessage
{
public:
  RotationMatrix();
  RotationMatrix(double);
  RotationMatrix(double, double, double, double, double, double, double, double, double);
  RotationMatrix(const std::array<double, 9>&);
  RotationMatrix(std::array<double, 9>&&);
  RotationMatrix(const uint8_t*);
  RotationMatrix(const RotationMatrix&);
  RotationMatrix(RotationMatrix&&);

  RotationMatrix& operator=(const RotationMatrix&);
  RotationMatrix& operator=(RotationMatrix&&);
  RotationMatrix& operator=(const uint8_t*);
  RotationMatrix& operator=(const std::array<double, 9>&);
  RotationMatrix& operator=(std::array<double, 9>&&);

  inline bool operator==(const RotationMatrix& rhs) const { return data_ == rhs.data_; }
  inline bool operator!=(const RotationMatrix& rhs) const { return !(*this == rhs); }

  friend std::ostream& operator<<(std::ostream&, const RotationMatrix&);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const override;

  /**
   * @brief Returns the rotation matrix as a linearized array.
   * @return Array that contains the elements of the Matrix, row-wise
   */
  inline std::array<double, 9> toVector() const { return data_; }
  /**
   * @brief Returns the matrix transpose
   */
  RotationMatrix getTranspose() const;

  /**
   * @brief Returns a row of the matrix.
   * @param row_index: index of the row to return in the range [0, 2]
   */
  std::array<double, 3> getRow(int row_index) const;

  /**
   * @brief Returns a column of the matrix.
   * @param column_index: index of the column to return in the range [0, 2]
   */
  std::array<double, 3> getColumn(int column_index) const;

  /**
   * @brief Mofidies a row of the matrix with the given elements.
   * @param row_index: index of the row to modify in the range [0, 2]
   */
  void setRow(int row_index, const std::array<double, 3>& values);

  /**
   * @brief Mofidies a column of the matrix with the given elements.
   * @param column_index: index of the column to modify in the range [0, 2]
   */
  void setColumn(int column_index, const std::array<double, 3>& values);

  /**
   * @brief Rerturns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return RotationMatrixFbsIdentifier(); }
  static const RotationMatrix Identity;

private:
  std::array<double, 9> data_{{0, 0, 0, 0, 0, 0, 0, 0, 0}};
};
}  // Namespace simple_msgs.
