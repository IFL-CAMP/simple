#pragma once

#include <array>
#include <iostream>

#include "generic_message.h"
#include "generated/rotation_matrix_generated.h"

namespace simple_msgs
{
/**
 * @brief RotationMatrix: wrapper class arounf the RotationMatrixFbs generated code from flatbuffers.
 * The matrix is stored colo
 */
class RotationMatrix : public GenericMessage
{
public:
  RotationMatrix()
    : GenericMessage()
  {
  }

  /**
   * @brief Constructor from the individual data.
   */
  RotationMatrix(double r11, double r12, double r13, double r21, double r22, double r23, double r31, double r32,
                 double r33)
    : matrix_{r11, r12, r13, r21, r22, r23, r31, r32, r33}
  {
  }

  /**
   * @brief Constructor from a 3 elements array representing the matrix.
   */
  RotationMatrix(const std::array<double, 9> matrix)
    : matrix_(matrix)
  {
  }

  /**
   * @brief Constructor from the buffer data.
   * @param data acquired from flatbuffer.
   */
  RotationMatrix(const uint8_t* data);

  /**
   * @brief Copy constructor.
   */
  RotationMatrix(const RotationMatrix& m)
    : RotationMatrix(m.matrix_)
  {
  }

  /**
   * @brief Copy assignment.
   */
  RotationMatrix& operator=(const RotationMatrix& m);

  /**
   * @brief operator==
   */
  bool operator==(const RotationMatrix& m) const;

  /**
   * @brief operator!=
   */
  bool operator!=(const RotationMatrix& m) const;

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const override;

  /**
   * @brief Returns the rotation matrix as a linearized array.
   */
  std::array<double, 9> getMatrix() const { return matrix_; }

  /**
   * @brief Returns the matrix transpose
   */
  RotationMatrix getTranspose() const;

  /**
   * @brief Returns a row of the matrix.
   * @param row_index: index of the row to return in the range [0, 2]
   */
  std::array<double, 3> getRow(int row_index) const;

  /**
   * @brief Returns a column of the matrix.
   * @param column_index: index of the column to return in the range [0, 2]
   */
  std::array<double, 3> getColumn(int column_index) const;

  /**
   * @brief Modifies the rotation matrix coeficients to the given array.
   */
  void setMatrix(std::array<double, 9> matrix);

  /**
   * @brief Mofidies a row of the matrix with the given elements.
   * @param row_index: index of the row to modify in the range [0, 2]
   */
  void setRow(int row_index, const std::array<double, 3>& values);

  /**
   * @brief Mofidies a column of the matrix with the given elements.
   * @param column_index: index of the column to modify in the range [0, 2]
   */
  void setColumn(int column_index, const std::array<double, 3>& values);

  /**
   * @brief Rerturns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return RotationMatrixFbsIdentifier(); }

  friend std::ostream& operator<<(std::ostream& out, const RotationMatrix& q);

private:
  std::array<double, 9> matrix_{};
};
}  // Namespace simple_msgs.
