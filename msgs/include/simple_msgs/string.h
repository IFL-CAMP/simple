/**
 * S.I.M.P.L.E. - Smart Intuitive Messaging Platform with Less Effort
 * Copyright (C) 2018 Salvatore Virga - salvo.virga@tum.de, Fernanda Levy
 * Langsch - fernanda.langsch@tum.de
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

#ifndef SIMPLE_MSGS_STRING_H
#define SIMPLE_MSGS_STRING_H

#include <ostream>

#include "generated/string_generated.h"
#include "generic_message.h"

namespace simple_msgs {
class String : public GenericMessage {
public:
  // Constructors,
  String() = default;
  String(const std::string&);
  String(std::string&&);
  String(const char*);
  String(const void*);
  String(const String&);
  String(String&&) noexcept;

  // Copy operations.
  String& operator=(const String&);
  String& operator=(String&&) noexcept;
  String& operator=(std::shared_ptr<void*>);

  // Relational operators.
  inline bool operator==(const String& rhs) const { return (data_ == rhs.data_); }
  inline bool operator!=(const String& rhs) const { return !(*this == rhs); }
  // Binary arithmetic operators
  String& operator+=(const String&);
  friend String operator+(String, const String&);

  // Stream extraction.
  friend std::ostream& operator<<(std::ostream& out, const String& s);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   */
  std::shared_ptr<flatbuffers::DetachedBuffer> getBufferData() const override;

  /**
   * @brief Returns the string information contained in the message.
   */
  inline std::string get() const { return data_; }

  /**
   * @brief Modifies the string information contained in the message.
   */
  inline void set(const std::string& data) {
    std::lock_guard<std::mutex> lock{mutex_};
    data_ = data;
  }

  /**
   * @brief Set the content to an empty string.
   */
  inline void clear() { data_.clear(); }

  inline bool empty() { return data_.empty(); }

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static inline std::string getTopic() { return StringFbsIdentifier(); }

private:
  std::string data_{""};
};
}  // Namespace simple_msgs.

#endif  // SIMPLE_MSGS_STRING_H
