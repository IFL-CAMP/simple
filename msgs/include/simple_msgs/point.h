#pragma once

#include <array>
#include <iostream>

#include "generic_message.h"
#include "generated/point_generated.h"

namespace simple_msgs
{
/**
 * @brief Point: wrapper class around the PointFbs generated code from flatbuffers.
 */
class Point : public GenericMessage
{
public:
  Point()
    : GenericMessage()
  {
  }

  /**
   * @brief Constructor from the individual data.
   * @param x X coordinate.
   * @param y Y coordinate.
   * @param z Z coordinate.
   */
  Point(double x, double y, double z)
    : x_(x)
    , y_(y)
    , z_(z)
  {
  }

  /**
   * @brief Constructor from a 3 elements array.
   */
  Point(const std::array<double, 3> v)
    : x_(v[0])
    , y_(v[1])
    , z_(v[2])
  {
  }

  /**
   * @brief Constructor from the buffer data.
   * @param data acquired from flatbuffer.
   */
  Point(const uint8_t* data);

  /**
   * @brief Copy constructor.
   */
  Point(const Point& p)
    : Point(p.x_, p.y_, p.z_)
  {
  }

  /**
   * @brief Copy assignment.
   */
  Point& operator=(const Point& p);

  /**
   * @brief operator==
   */
  bool operator==(const Point& p) const;

  /**
   * @brief operator!=
   */
  bool operator!=(const Point& p) const;

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const override;

  /**
   * @brief Returns the point as an array of 3 elements.
   */
  std::array<double, 3> toVector() const { return std::array<double, 3>{x_, y_, z_}; }

  /**
   * @brief Returns of the x point coordinate.
   */
  double getX() const { return x_; }

  /**
   * @brief Returns of the y point coordinate.
   */
  double getY() const { return y_; }

  /**
   * @brief Returns of the z point coordinate.
   */
  double getZ() const { return z_; }

  /**
   * @brief Modifies the point given an array of 3 elements.
   */
  void fromVector(const std::array<double, 3>& pt);

  /**
   * @brief Modifies the x coordinate of the point.
   */
  void setX(double x);

  /**
   * @brief Modifies the y coordinate of the point.
   */
  void setY(double y);

  /**
   * @brief Modifies the z coordinate of the point.
   */
  void setZ(double z);

  /**
   * @brief Rerturns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return PointFbsIdentifier(); }

  friend std::ostream& operator<<(std::ostream& out, const Point& q);

private:
  double x_{0}, y_{0}, z_{0};
};
}  // Namespace simple_msgs.
