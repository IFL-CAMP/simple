#pragma once

#include <array>
#include "generic_message.h"
#include "point_generated.h"

namespace simple_msgs
{
/**
 * @brief Point: wrapper class around the PointFbs generated code from flatbuffers.
 */
class Point : public GenericMessage
{
public:
  Point()
    : GenericMessage()
  {
  }

  /**
   * @brief Constructor from the individual data.
   * @param x X coordinate.
   * @param y Y coordinate.
   * @param z Z coordinate.
   */
  Point(const double x, const double y, const double z)
    : x_(x)
    , y_(y)
    , z_(z)
  {
  }

  /**
   * @brief Constructor from the buffer data.
   * @param data acquired from flatbuffer
   */
  Point(const uint8_t* data);

  /**
   * @brief Copy constructor
   */
  Point(const Point& p)
    : Point(p.x_, p.y_, p.z_)
  {
  }

  /**
   * @brief Copy assignment
   */
  Point& operator=(const Point& p);

  /**
   * @brief operator ==
   */
  bool operator==(const Point& h) const;

  /**
   * @brief operator !=
   */
  bool operator!=(const Point& h) const;

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const;

  /**
   * @brief Returns the point as an array of 3 elements.
   */
  std::array<double, 3> getPoint() const { return std::array<double, 3>{x_, y_, z_}; }

  /**
   * @brief Returns of the x point coordinate.
   */
  double getX() const { return x_; }

  /**
   * @brief Returns of the y point coordinate.
   */
  double getY() const { return y_; }

  /**
   * @brief Returns of the z point coordinate.
   */
  double getZ() const { return z_; }

  /**
   * @brief Modifies the point given an array of 3 elements.
   */
  void setPoint(const std::array<double, 3>& pt);

  /**
   * @brief Modifies the x coordinate of the point.
   */
  void setX(const double x);

  /**
   * @brief Modifies the y coordinate of the point.
   */
  void setY(const double y);

  /**
   * @brief Modifies the z coordinate of the point.
   */
  void setZ(const double z);

  /**
   * @brief Rerturns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return PointFbsIdentifier(); }

private:
  double x_{0}, y_{0}, z_{0};
};
}  // namespace simple_msgs
