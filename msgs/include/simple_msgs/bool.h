#pragma once

#include "generic_message.h"
#include "bool_generated.h"

namespace simple_msgs
{
class Bool : public GenericMessage
{
public:
  Bool()
    : GenericMessage()
  {
  }

  /**
   * @brief Constructo from the individual data.
   */
  Bool(bool data)
    : data_(data)
  {
  }

  /**
   * @brief Constructor from the buffer data.
   * @param data acquired from flatbuffer.
   */
  Bool(const uint8_t* data);

  /**
   * @brief Copy constructor.
   */
  Bool(const Bool& b)
    : Bool(b.data_)
  {
  }

  /**
   * @brief Copy assignment.
   */
  Bool& operator=(const Bool& b);

  /**
   * @brief operator==
   */
  bool operator==(const Bool& b) const { return data_ == b.data_; }

  /**
   * @brief operator!=
   */
  bool operator!=(const Bool& b) const { return !(*this == b); }

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const;

  /**
   * @brief Set the boolean value.
   */
  void set(bool data);

  /**
   * @brief Get the boolean value.
   */
  bool get() const { return data_; }

  /**
   * @brief Rerturns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return BoolFbsIdentifier(); }

  friend std::ostream& operator<<(std::ostream& out, const Bool& b);

private:
  bool data_{false};
};
}  // Namespace simple_msgs.
