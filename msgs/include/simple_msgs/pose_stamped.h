#pragma once

#include <iostream>

#include "generated/pose_stamped_generated.h"
#include "header.h"
#include "pose.h"

namespace simple_msgs
{
class PoseStamped : public GenericMessage
{
public:
  PoseStamped();
  PoseStamped(const Pose&, const Header&);
  PoseStamped(const uint8_t*);
  PoseStamped(const PoseStamped&);
  PoseStamped(PoseStamped&&);

  PoseStamped& operator=(const PoseStamped&);
  PoseStamped& operator=(PoseStamped&&);
  PoseStamped& operator=(const uint8_t*);

  bool operator==(const PoseStamped&) const;
  bool operator!=(const PoseStamped&) const;

  friend std::ostream& operator<<(std::ostream&, const PoseStamped&);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const;

  /**
   * @brief Returns the translational part of the Pose as a Point message.
   */
  Pose getPose() const { return pose_; }
  /**
   * @brief Returns the rotational part of the Pose as a Quaternion message.
   */
  Header getHeader() const { return header_; }
  /**
   * @brief Modifies the rotational part of the Pose.
   */
  inline void setPose(const Pose& pose) { pose_ = pose; }

  /**
   * @brief Modifies the translational part of the Pose.
   */
  inline void setHeader(const Header& header) { header_ = header; }

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return PoseStampedFbsIdentifier(); }

private:
  Pose pose_;
  Header header_;
};
}  // Namespace simple_msgs.
