#pragma once

#include <iostream>

#include "generated/pose_stamped_generated.h"
#include "header.h"
#include "pose.h"

namespace simple_msgs
{
class PoseStamped : public GenericMessage
{
public:
  PoseStamped();
  PoseStamped(const Header&, const Pose&);
  PoseStamped(const uint8_t*);
  PoseStamped(const PoseStamped&);
  PoseStamped(PoseStamped&&);

  PoseStamped& operator=(const PoseStamped&);
  PoseStamped& operator=(PoseStamped&&);
  PoseStamped& operator=(const uint8_t*);

  inline bool operator==(const PoseStamped& rhs) const { return (pose_ == rhs.pose_ && header_ == rhs.header_); }
  inline bool operator!=(const PoseStamped& rhs) const { return !(*this == rhs); }
  friend std::ostream& operator<<(std::ostream&, const PoseStamped&);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const override;

  /**
   * @brief Returns the message Pose.
   */
  inline Pose& getPose() { return pose_; }
  inline const Pose& getPose() const { return pose_; }
  /**
   * @brief Returns message Header.
   */
  inline Header& getHeader() { return header_; }
  inline const Header& getHeader() const { return header_; }
  /**
   * @brief Modifies the message Pose.
   */
  inline void setPose(const Pose&);
  /**
   * @brief Modifies the message Header.
   */
  inline void setHeader(const Header&);
  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return PoseStampedFbsIdentifier(); }
private:
  Pose pose_{};
  Header header_{};
};
}  // Namespace simple_msgs.
