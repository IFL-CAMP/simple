#pragma once

#include <ostream>
#include "generic_message.h"
#include "header.h"
#include "bool.h"
#include "generated/bool_stamped_generated.h"

namespace simple_msgs
{
class BoolStamped : public GenericMessage
{
public:
  BoolStamped();
  BoolStamped(const Bool& data, const Header& header);
  BoolStamped(const uint8_t*);
  BoolStamped(const BoolStamped&);
  BoolStamped(BoolStamped&&);

  BoolStamped& operator=(const BoolStamped&);
  BoolStamped& operator=(BoolStamped&&);
  BoolStamped& operator=(const uint8_t*);

  inline bool operator==(const BoolStamped&) const;
  inline bool operator!=(const BoolStamped&) const;

  friend std::ostream& operator<<(std::ostream& out, const BoolStamped& b);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const;

  /**
   * @brief Set the boolean value.
   */
  inline void setBool(const Bool& data) { data_ = data; }

  /**
   * @brief Set the header
   */
  inline void setHeader(const Header& h) { header_ = h; }

  /**
   * @brief Get the boolean value.
   */
  inline Bool getBool() const { return data_; }

  /**
   * @brief Get the header.
   */
  inline Header getHeader() const { return header_; }

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static inline const char* getTopic() { return BoolStampedFbsIdentifier(); }

private:
  Bool data_{};
  Header header_{};
};
}  // Namespace simple_msgs.
