/**
 * S.I.M.P.L.E. - Smart Intuitive Messaging Platform with Less Effort
 * Copyright (C) 2018 Salvatore Virga - salvo.virga@tum.de, Fernanda Levy
 * Langsch - fernanda.langsch@tum.de
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

#ifndef SIMPLE_MSGS_HEADER_H
#define SIMPLE_MSGS_HEADER_H

#include <mutex>
#include <ostream>

#include "generic_message.hpp"

namespace simple_msgs {

/**
 * @class Header header.hpp
 * @brief Thread-safe wrapper for a Flatbuffers Header message, as defined in header.fbs.
 *
 * A Header contains metadata information for other messages types.
 * It is composed of:
 * A <b>sequence number</b>, typically used to describe the sequence of messages sent or received.
 * A <b>frame_id</b>, typically refering to a coordinate frame the message data is associated to.
 * (e.g. a PoseStamped is linked to a certain reference frame).
 * A <b>timestamp</b>, stores when the message is generated (usually time from epoch).
 */
class Header : public GenericMessage {
public:
  Header() = default;

  /**
   * @brief Construct a Header message using the given parameters.
   */
  Header(int sequence_number, const std::string& frame_id, long long timestamp);

  /**
   * @brief Copy constructor.
   */
  Header(const Header& other);

  /**
   * @brief Move constructor.
   */
  Header(Header&& other) noexcept;

  /**
   * @brief Copy assignment operator.
   */
  Header& operator=(const Header& rhs);

  /**
   * @brief Move assignment operator.
   */
  Header& operator=(Header&& rhs) noexcept;

  /**
   * @brief Returns true if lhs is equal to rhs, false otherwise.
   */
  inline bool operator==(const Header& rhs) const {
    std::lock_guard<std::mutex> lock{mutex_};
    return (seq_n_ == rhs.seq_n_ && frame_id_ == rhs.frame_id_ && timestamp_ == rhs.timestamp_);
  }

  /**
   * @brief Returns true if lhs is not equal to rhs, false otherwise.
   */
  inline bool operator!=(const Header& rhs) const { return !(*this == rhs); }

  /**
   * @brief Stream extraction operator.
   */
  friend std::ostream& operator<<(std::ostream& out, const Header& h);

  /**
   * @brief Returns the sequence number of the message.
   */
  inline int getSequenceNumber() const {
    std::lock_guard<std::mutex> lock{mutex_};
    return seq_n_;
  }
  /**
   * @brief Returns the frame id of the message.
   */
  inline std::string getFrameID() const {
    std::lock_guard<std::mutex> lock{mutex_};
    return frame_id_;
  }
  /**
   * @brief Returns the timestamp of the message.
   */
  inline long long getTimestamp() const {
    std::lock_guard<std::mutex> lock{mutex_};
    return timestamp_;
  }
  /**
   * @brief Modifies the sequence number of the message.
   */
  void setSequenceNumber(int sequence_number);

  /**
   * @brief Modifies the frame id of the message.
   */
  void setFrameID(const std::string& frame_id);

  /**
   * @brief Modifies the timestamp of the message.
   * @param [in] timestamp - Time since epoch, usually representing when the message data was generated.
   */
  void setTimestamp(long long timestamp);

  /**
   * @brief Returns an identifier of the message type generated by the flatbuffers.
   */
  static std::string getTopic();

  friend class PointStamped;
  friend class PoseStamped;
  friend class QuaternionStamped;
  friend class RotationMatrixStamped;
  friend class TransformStamped;
  template <typename T>
  friend class Image;

protected:
  /**
   * @brief Construct a Header message using a raw memory coming from network.
   */
  Header(const void* data);

  /**
   * @brief Copy assignment operator that uses raw memory coming from the network.
   */
  Header& operator=(std::shared_ptr<void*> rhs) override;

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   */
  std::shared_ptr<flatbuffers::DetachedBuffer> getBufferData() const override;

private:
  //! Thread safe copy and move constructors.
  Header(const Header& other, const std::lock_guard<std::mutex>&);
  Header(Header&& other, const std::lock_guard<std::mutex>&) noexcept;

  mutable std::mutex mutex_{};
  int seq_n_{0};
  std::string frame_id_{""};
  long long timestamp_{0};
};
}  // Namespace simple_msgs.

#endif  // SIMPLE_MSGS_HEADER_H
