#pragma once

#include <mutex>
#include "generic_message.h"
#include "header_generated.h"

namespace simple_msgs
{
/**
 * @brief Header: wrapper class around the HeaderFbs generated code from flatbuffers.
 */
class Header : public GenericMessage
{
public:
  using GenericMessage::GenericMessage;  //< Using the default constructor of GenericMessage.

  /**
   * @brief Constructor from the individual data.
   * @param seq_n: sequence number of the message.
   * @param frame_id: string that identifies the frame this message is associate with.
   * @param timestamp: message timestamp.
   */
  Header(const int seq_n, const std::string& frame_id, const double timestamp)
    : seq_n_(seq_n)
    , frame_id_(frame_id)
    , timestamp_(timestamp)
  {
  }

  /**
   * @brief Constructor from buffer data.
   * @param data acquired from flatbuffer, for example from the GetRoot method.
   */
  Header(const uint8_t* data);

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   * @return the buffer data.
   */
  uint8_t* getBufferData() const;

  /**
   * @brief Returns the size of the buffer.
   * @return size of the buffer.
   */
  int getBufferSize() const { return builder_->GetSize(); }

  /**
   * @brief Returns the sequence number of the message.
   * @return seq_n
   */
  int getSequenceNumber() const { return seq_n_; }

  /**
   * @brief Returns the frame id of the message.
   * @return frame_id
   */
  std::string getFrameID() const { return frame_id_; }

  /**
   * @brief Returns the timestamp of the message.
   * @return timestamp
   */
  double getTimestamp() const { return timestamp_; }

  /**
   * @brief Modifies the sequence number of the message.
   * @param seq_n
   */
  void setSequenceNumber(const int seq_n);

  /**
   * @brief Modifies the frame id of the message.
   * @param frame_id
   */
  void setFrameID(const std::string& frame_id);

  /**
   * @brief Modifies the timestamp of the message.
   * @param timestamp Seconds since the epoch, when the data in the message was generated
   */
  void setTimestamp(const double timestamp);

  /**
   * @brief Rerturns an identifier of the message type generated by the flatbuffers.
   * @return
   */
  static const char* getTopic() { return HeaderFbsIdentifier(); }

private:
  int seq_n_{0};
  std::string frame_id_{""};
  double timestamp_{0.0};
};
}  // namespace simple_msgs
