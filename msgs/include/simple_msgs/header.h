#pragma once

#include "generic_message.h"
#include "header_generated.h"
#include <iostream>

namespace simple_msgs
{
/**
 * @brief Header: wrapper class around the HeaderFbs generated code from flatbuffers.
 */
class Header : public GenericMessage
{
public:
  Header() noexcept
    : GenericMessage()
  {
  }

  /**
   * @brief Constructor from the individual data.
   * @param seq_n: sequence number of the message.
   * @param frame_id: string that identifies the frame this message is associate with.
   * @param timestamp: message timestamp.
   */
  Header(int seq_n, const std::string& frame_id, double timestamp) noexcept
    : seq_n_(seq_n)
    , frame_id_(frame_id)
    , timestamp_(timestamp)
  {
  }

  /**
   * @brief Constructor from buffer data.
   * @param data acquired from flatbuffer.
   */
  Header(const uint8_t* data);

  /**
   * @brief Copy constructor.
   */
  Header(const Header& h)
    : Header(h.seq_n_, h.frame_id_, h.timestamp_)
  {
  }

  /**
   * @brief Copy assignment.
   */
  Header& operator=(const Header& h);

  /**
   * @brief operator==
   */
  bool operator==(const Header& h) const;

  /**
   * @brief operator!=
   */
  bool operator!=(const Header& h) const;

  /**
   * @brief Builds and returns the buffer accordingly to the values currently stored.
   */
  uint8_t* getBufferData() const override;

  /**
   * @brief Returns the sequence number of the message.
   */
  int getSequenceNumber() const { return seq_n_; }

  /**
   * @brief Returns the frame id of the message.
   */
  std::string getFrameID() const { return frame_id_; }

  /**
   * @brief Returns the timestamp of the message.
   */
  double getTimestamp() const { return timestamp_; }

  /**
   * @brief Modifies the sequence number of the message.
   */
  void setSequenceNumber(int seq_n);

  /**
   * @brief Modifies the frame id of the message.
   */
  void setFrameID(const std::string& frame_id);

  /**
   * @brief Modifies the timestamp of the message.
   * @param timestamp Seconds since the epoch, when the data in the message was generated.
   */
  void setTimestamp(double timestamp);

  /**
   * @brief Rerturns an identifier of the message type generated by the flatbuffers.
   */
  static const char* getTopic() { return HeaderFbsIdentifier(); }

  friend std::ostream& operator<<(std::ostream& out, const Header& h);

private:
  int seq_n_{0};
  std::string frame_id_{""};
  double timestamp_{0.0};
};
}  // Namespace simple_msgs.
