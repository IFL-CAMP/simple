// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSE_SIMPLE_MSGS_H_
#define FLATBUFFERS_GENERATED_POSE_SIMPLE_MSGS_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace simple_msgs {

struct pose;

struct pose_stamped;

struct pose FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POINT = 4,
    VT_QUAT = 6
  };
  uint8_t point() const {
    return GetField<uint8_t>(VT_POINT, 0);
  }
  uint8_t quat() const {
    return GetField<uint8_t>(VT_QUAT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_POINT) &&
           VerifyField<uint8_t>(verifier, VT_QUAT) &&
           verifier.EndTable();
  }
};

struct poseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_point(uint8_t point) {
    fbb_.AddElement<uint8_t>(pose::VT_POINT, point, 0);
  }
  void add_quat(uint8_t quat) {
    fbb_.AddElement<uint8_t>(pose::VT_QUAT, quat, 0);
  }
  explicit poseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  poseBuilder &operator=(const poseBuilder &);
  flatbuffers::Offset<pose> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<pose>(end);
    return o;
  }
};

inline flatbuffers::Offset<pose> Createpose(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t point = 0,
    uint8_t quat = 0) {
  poseBuilder builder_(_fbb);
  builder_.add_quat(quat);
  builder_.add_point(point);
  return builder_.Finish();
}

struct pose_stamped FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POSES = 4,
    VT_HEADER = 6
  };
  uint8_t poses() const {
    return GetField<uint8_t>(VT_POSES, 0);
  }
  uint8_t Header() const {
    return GetField<uint8_t>(VT_HEADER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_POSES) &&
           VerifyField<uint8_t>(verifier, VT_HEADER) &&
           verifier.EndTable();
  }
};

struct pose_stampedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_poses(uint8_t poses) {
    fbb_.AddElement<uint8_t>(pose_stamped::VT_POSES, poses, 0);
  }
  void add_Header(uint8_t Header) {
    fbb_.AddElement<uint8_t>(pose_stamped::VT_HEADER, Header, 0);
  }
  explicit pose_stampedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  pose_stampedBuilder &operator=(const pose_stampedBuilder &);
  flatbuffers::Offset<pose_stamped> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<pose_stamped>(end);
    return o;
  }
};

inline flatbuffers::Offset<pose_stamped> Createpose_stamped(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t poses = 0,
    uint8_t Header = 0) {
  pose_stampedBuilder builder_(_fbb);
  builder_.add_Header(Header);
  builder_.add_poses(poses);
  return builder_.Finish();
}

inline const simple_msgs::pose_stamped *Getpose_stamped(const void *buf) {
  return flatbuffers::GetRoot<simple_msgs::pose_stamped>(buf);
}

inline const char *pose_stampedIdentifier() {
  return "POSE";
}

inline bool pose_stampedBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, pose_stampedIdentifier());
}

inline bool Verifypose_stampedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple_msgs::pose_stamped>(pose_stampedIdentifier());
}

inline void Finishpose_stampedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple_msgs::pose_stamped> root) {
  fbb.Finish(root, pose_stampedIdentifier());
}

}  // namespace simple_msgs

#endif  // FLATBUFFERS_GENERATED_POSE_SIMPLE_MSGS_H_
