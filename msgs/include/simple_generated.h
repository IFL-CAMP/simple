// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIMPLE_SIMPLE_H_
#define FLATBUFFERS_GENERATED_SIMPLE_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace simple {

struct header;

struct header FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DEVICENAME = 4,
    VT_DATATYPENAME = 6,
    VT_VERSIONNUM = 8,
    VT_TIMESTAMP = 10
  };
  const flatbuffers::String *devicename() const {
    return GetPointer<const flatbuffers::String *>(VT_DEVICENAME);
  }
  const flatbuffers::String *datatypename() const {
    return GetPointer<const flatbuffers::String *>(VT_DATATYPENAME);
  }
  int32_t versionnum() const {
    return GetField<int32_t>(VT_VERSIONNUM, 0);
  }
  double timestamp() const {
    return GetField<double>(VT_TIMESTAMP, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DEVICENAME) &&
           verifier.Verify(devicename()) &&
           VerifyOffset(verifier, VT_DATATYPENAME) &&
           verifier.Verify(datatypename()) &&
           VerifyField<int32_t>(verifier, VT_VERSIONNUM) &&
           VerifyField<double>(verifier, VT_TIMESTAMP) &&
           verifier.EndTable();
  }
};

struct headerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_devicename(flatbuffers::Offset<flatbuffers::String> devicename) {
    fbb_.AddOffset(header::VT_DEVICENAME, devicename);
  }
  void add_datatypename(flatbuffers::Offset<flatbuffers::String> datatypename) {
    fbb_.AddOffset(header::VT_DATATYPENAME, datatypename);
  }
  void add_versionnum(int32_t versionnum) {
    fbb_.AddElement<int32_t>(header::VT_VERSIONNUM, versionnum, 0);
  }
  void add_timestamp(double timestamp) {
    fbb_.AddElement<double>(header::VT_TIMESTAMP, timestamp, 0.0);
  }
  explicit headerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  headerBuilder &operator=(const headerBuilder &);
  flatbuffers::Offset<header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<header>(end);
    return o;
  }
};

inline flatbuffers::Offset<header> Createheader(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> devicename = 0,
    flatbuffers::Offset<flatbuffers::String> datatypename = 0,
    int32_t versionnum = 0,
    double timestamp = 0.0) {
  headerBuilder builder_(_fbb);
  builder_.add_timestamp(timestamp);
  builder_.add_versionnum(versionnum);
  builder_.add_datatypename(datatypename);
  builder_.add_devicename(devicename);
  return builder_.Finish();
}

inline flatbuffers::Offset<header> CreateheaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *devicename = nullptr,
    const char *datatypename = nullptr,
    int32_t versionnum = 0,
    double timestamp = 0.0) {
  return simple::Createheader(
      _fbb,
      devicename ? _fbb.CreateString(devicename) : 0,
      datatypename ? _fbb.CreateString(datatypename) : 0,
      versionnum,
      timestamp);
}

inline const simple::header *Getheader(const void *buf) {
  return flatbuffers::GetRoot<simple::header>(buf);
}

inline bool VerifyheaderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::header>(nullptr);
}

inline void FinishheaderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::header> root) {
  fbb.Finish(root);
}

}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_SIMPLE_SIMPLE_H_
