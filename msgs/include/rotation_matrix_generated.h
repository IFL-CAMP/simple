// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ROTATIONMATRIX_SIMPLE_MSGS_H_
#define FLATBUFFERS_GENERATED_ROTATIONMATRIX_SIMPLE_MSGS_H_

#include "flatbuffers/flatbuffers.h"

namespace simple_msgs {

struct RotationMatrixFbs;

struct RotationMatrixFbs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_R11 = 4,
    VT_R12 = 6,
    VT_R13 = 8,
    VT_R21 = 10,
    VT_R22 = 12,
    VT_R23 = 14,
    VT_R31 = 16,
    VT_R32 = 18,
    VT_R33 = 20
  };
  double r11() const {
    return GetField<double>(VT_R11, 0.0);
  }
  double r12() const {
    return GetField<double>(VT_R12, 0.0);
  }
  double r13() const {
    return GetField<double>(VT_R13, 0.0);
  }
  double r21() const {
    return GetField<double>(VT_R21, 0.0);
  }
  double r22() const {
    return GetField<double>(VT_R22, 0.0);
  }
  double r23() const {
    return GetField<double>(VT_R23, 0.0);
  }
  double r31() const {
    return GetField<double>(VT_R31, 0.0);
  }
  double r32() const {
    return GetField<double>(VT_R32, 0.0);
  }
  double r33() const {
    return GetField<double>(VT_R33, 0.0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_R11) &&
           VerifyField<double>(verifier, VT_R12) &&
           VerifyField<double>(verifier, VT_R13) &&
           VerifyField<double>(verifier, VT_R21) &&
           VerifyField<double>(verifier, VT_R22) &&
           VerifyField<double>(verifier, VT_R23) &&
           VerifyField<double>(verifier, VT_R31) &&
           VerifyField<double>(verifier, VT_R32) &&
           VerifyField<double>(verifier, VT_R33) &&
           verifier.EndTable();
  }
};

struct RotationMatrixFbsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_r11(double r11) {
    fbb_.AddElement<double>(RotationMatrixFbs::VT_R11, r11, 0.0);
  }
  void add_r12(double r12) {
    fbb_.AddElement<double>(RotationMatrixFbs::VT_R12, r12, 0.0);
  }
  void add_r13(double r13) {
    fbb_.AddElement<double>(RotationMatrixFbs::VT_R13, r13, 0.0);
  }
  void add_r21(double r21) {
    fbb_.AddElement<double>(RotationMatrixFbs::VT_R21, r21, 0.0);
  }
  void add_r22(double r22) {
    fbb_.AddElement<double>(RotationMatrixFbs::VT_R22, r22, 0.0);
  }
  void add_r23(double r23) {
    fbb_.AddElement<double>(RotationMatrixFbs::VT_R23, r23, 0.0);
  }
  void add_r31(double r31) {
    fbb_.AddElement<double>(RotationMatrixFbs::VT_R31, r31, 0.0);
  }
  void add_r32(double r32) {
    fbb_.AddElement<double>(RotationMatrixFbs::VT_R32, r32, 0.0);
  }
  void add_r33(double r33) {
    fbb_.AddElement<double>(RotationMatrixFbs::VT_R33, r33, 0.0);
  }
  explicit RotationMatrixFbsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RotationMatrixFbsBuilder &operator=(const RotationMatrixFbsBuilder &);
  flatbuffers::Offset<RotationMatrixFbs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RotationMatrixFbs>(end);
    return o;
  }
};

inline flatbuffers::Offset<RotationMatrixFbs> CreateRotationMatrixFbs(
    flatbuffers::FlatBufferBuilder &_fbb,
    double r11 = 0.0,
    double r12 = 0.0,
    double r13 = 0.0,
    double r21 = 0.0,
    double r22 = 0.0,
    double r23 = 0.0,
    double r31 = 0.0,
    double r32 = 0.0,
    double r33 = 0.0) {
  RotationMatrixFbsBuilder builder_(_fbb);
  builder_.add_r33(r33);
  builder_.add_r32(r32);
  builder_.add_r31(r31);
  builder_.add_r23(r23);
  builder_.add_r22(r22);
  builder_.add_r21(r21);
  builder_.add_r13(r13);
  builder_.add_r12(r12);
  builder_.add_r11(r11);
  return builder_.Finish();
}

inline const simple_msgs::RotationMatrixFbs *GetRotationMatrixFbs(const void *buf) {
  return flatbuffers::GetRoot<simple_msgs::RotationMatrixFbs>(buf);
}

inline const char *RotationMatrixFbsIdentifier() {
  return "RMAT";
}

inline bool RotationMatrixFbsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, RotationMatrixFbsIdentifier());
}

inline bool VerifyRotationMatrixFbsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple_msgs::RotationMatrixFbs>(RotationMatrixFbsIdentifier());
}

inline void FinishRotationMatrixFbsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple_msgs::RotationMatrixFbs> root) {
  fbb.Finish(root, RotationMatrixFbsIdentifier());
}

}  // namespace simple_msgs

#endif  // FLATBUFFERS_GENERATED_ROTATIONMATRIX_SIMPLE_MSGS_H_
