// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ROTATIONMATRIX_SIMPLE_MSGS_H_
#define FLATBUFFERS_GENERATED_ROTATIONMATRIX_SIMPLE_MSGS_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace simple_msgs {

struct rotationMatrix;

struct rotationMatrix_Stamped;

MANUALLY_ALIGNED_STRUCT(8) rotationMatrix FLATBUFFERS_FINAL_CLASS {
 private:
  double r11_;
  double r12_;
  double r13_;
  double r21_;
  double r22_;
  double r23_;
  double r31_;
  double r32_;
  double r33_;

 public:
  rotationMatrix() {
    memset(this, 0, sizeof(rotationMatrix));
  }
  rotationMatrix(double _r11, double _r12, double _r13, double _r21, double _r22, double _r23, double _r31, double _r32, double _r33)
      : r11_(flatbuffers::EndianScalar(_r11)),
        r12_(flatbuffers::EndianScalar(_r12)),
        r13_(flatbuffers::EndianScalar(_r13)),
        r21_(flatbuffers::EndianScalar(_r21)),
        r22_(flatbuffers::EndianScalar(_r22)),
        r23_(flatbuffers::EndianScalar(_r23)),
        r31_(flatbuffers::EndianScalar(_r31)),
        r32_(flatbuffers::EndianScalar(_r32)),
        r33_(flatbuffers::EndianScalar(_r33)) {
  }
  double r11() const {
    return flatbuffers::EndianScalar(r11_);
  }
  double r12() const {
    return flatbuffers::EndianScalar(r12_);
  }
  double r13() const {
    return flatbuffers::EndianScalar(r13_);
  }
  double r21() const {
    return flatbuffers::EndianScalar(r21_);
  }
  double r22() const {
    return flatbuffers::EndianScalar(r22_);
  }
  double r23() const {
    return flatbuffers::EndianScalar(r23_);
  }
  double r31() const {
    return flatbuffers::EndianScalar(r31_);
  }
  double r32() const {
    return flatbuffers::EndianScalar(r32_);
  }
  double r33() const {
    return flatbuffers::EndianScalar(r33_);
  }
};
STRUCT_END(rotationMatrix, 72);

struct rotationMatrix_Stamped FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ROTATIONM = 4,
    VT_HEADER = 6
  };
  uint8_t rotationM() const {
    return GetField<uint8_t>(VT_ROTATIONM, 0);
  }
  uint8_t Header() const {
    return GetField<uint8_t>(VT_HEADER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ROTATIONM) &&
           VerifyField<uint8_t>(verifier, VT_HEADER) &&
           verifier.EndTable();
  }
};

struct rotationMatrix_StampedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_rotationM(uint8_t rotationM) {
    fbb_.AddElement<uint8_t>(rotationMatrix_Stamped::VT_ROTATIONM, rotationM, 0);
  }
  void add_Header(uint8_t Header) {
    fbb_.AddElement<uint8_t>(rotationMatrix_Stamped::VT_HEADER, Header, 0);
  }
  explicit rotationMatrix_StampedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  rotationMatrix_StampedBuilder &operator=(const rotationMatrix_StampedBuilder &);
  flatbuffers::Offset<rotationMatrix_Stamped> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<rotationMatrix_Stamped>(end);
    return o;
  }
};

inline flatbuffers::Offset<rotationMatrix_Stamped> CreaterotationMatrix_Stamped(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t rotationM = 0,
    uint8_t Header = 0) {
  rotationMatrix_StampedBuilder builder_(_fbb);
  builder_.add_Header(Header);
  builder_.add_rotationM(rotationM);
  return builder_.Finish();
}

inline const simple_msgs::rotationMatrix_Stamped *GetrotationMatrix_Stamped(const void *buf) {
  return flatbuffers::GetRoot<simple_msgs::rotationMatrix_Stamped>(buf);
}

inline const char *rotationMatrix_StampedIdentifier() {
  return "ROTM";
}

inline bool rotationMatrix_StampedBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, rotationMatrix_StampedIdentifier());
}

inline bool VerifyrotationMatrix_StampedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple_msgs::rotationMatrix_Stamped>(rotationMatrix_StampedIdentifier());
}

inline void FinishrotationMatrix_StampedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple_msgs::rotationMatrix_Stamped> root) {
  fbb.Finish(root, rotationMatrix_StampedIdentifier());
}

}  // namespace simple_msgs

#endif  // FLATBUFFERS_GENERATED_ROTATIONMATRIX_SIMPLE_MSGS_H_
