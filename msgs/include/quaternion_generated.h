// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_QUATERNION_SIMPLE_MSGS_H_
#define FLATBUFFERS_GENERATED_QUATERNION_SIMPLE_MSGS_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace simple_msgs {

struct quaternion;

struct quaternion_stamped;

MANUALLY_ALIGNED_STRUCT(8) quaternion FLATBUFFERS_FINAL_CLASS {
 private:
  double e1_;
  double e2_;
  double e3_;
  double e4_;

 public:
  quaternion() {
    memset(this, 0, sizeof(quaternion));
  }
  quaternion(double _e1, double _e2, double _e3, double _e4)
      : e1_(flatbuffers::EndianScalar(_e1)),
        e2_(flatbuffers::EndianScalar(_e2)),
        e3_(flatbuffers::EndianScalar(_e3)),
        e4_(flatbuffers::EndianScalar(_e4)) {
  }
  double e1() const {
    return flatbuffers::EndianScalar(e1_);
  }
  double e2() const {
    return flatbuffers::EndianScalar(e2_);
  }
  double e3() const {
    return flatbuffers::EndianScalar(e3_);
  }
  double e4() const {
    return flatbuffers::EndianScalar(e4_);
  }
};
STRUCT_END(quaternion, 32);

struct quaternion_stamped FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_QUAT = 4,
    VT_HEADER = 6
  };
  uint8_t quat() const {
    return GetField<uint8_t>(VT_QUAT, 0);
  }
  uint8_t Header() const {
    return GetField<uint8_t>(VT_HEADER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_QUAT) &&
           VerifyField<uint8_t>(verifier, VT_HEADER) &&
           verifier.EndTable();
  }
};

struct quaternion_stampedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_quat(uint8_t quat) {
    fbb_.AddElement<uint8_t>(quaternion_stamped::VT_QUAT, quat, 0);
  }
  void add_Header(uint8_t Header) {
    fbb_.AddElement<uint8_t>(quaternion_stamped::VT_HEADER, Header, 0);
  }
  explicit quaternion_stampedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  quaternion_stampedBuilder &operator=(const quaternion_stampedBuilder &);
  flatbuffers::Offset<quaternion_stamped> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<quaternion_stamped>(end);
    return o;
  }
};

inline flatbuffers::Offset<quaternion_stamped> Createquaternion_stamped(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t quat = 0,
    uint8_t Header = 0) {
  quaternion_stampedBuilder builder_(_fbb);
  builder_.add_Header(Header);
  builder_.add_quat(quat);
  return builder_.Finish();
}

inline const simple_msgs::quaternion_stamped *Getquaternion_stamped(const void *buf) {
  return flatbuffers::GetRoot<simple_msgs::quaternion_stamped>(buf);
}

inline const char *quaternion_stampedIdentifier() {
  return "QATR";
}

inline bool quaternion_stampedBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, quaternion_stampedIdentifier());
}

inline bool Verifyquaternion_stampedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple_msgs::quaternion_stamped>(quaternion_stampedIdentifier());
}

inline void Finishquaternion_stampedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple_msgs::quaternion_stamped> root) {
  fbb.Finish(root, quaternion_stampedIdentifier());
}

}  // namespace simple_msgs

#endif  // FLATBUFFERS_GENERATED_QUATERNION_SIMPLE_MSGS_H_
