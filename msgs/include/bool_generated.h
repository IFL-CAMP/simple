// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BOOL_SIMPLE_H_
#define FLATBUFFERS_GENERATED_BOOL_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace simple {

struct BoolFbs;

struct BoolFbs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  bool data() const {
    return GetField<uint8_t>(VT_DATA, 0) != 0;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DATA) &&
           verifier.EndTable();
  }
};

struct BoolFbsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(bool data) {
    fbb_.AddElement<uint8_t>(BoolFbs::VT_DATA, static_cast<uint8_t>(data), 0);
  }
  explicit BoolFbsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BoolFbsBuilder &operator=(const BoolFbsBuilder &);
  flatbuffers::Offset<BoolFbs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BoolFbs>(end);
    return o;
  }
};

inline flatbuffers::Offset<BoolFbs> CreateBoolFbs(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool data = false) {
  BoolFbsBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline const simple::BoolFbs *GetBoolFbs(const void *buf) {
  return flatbuffers::GetRoot<simple::BoolFbs>(buf);
}

inline const char *BoolFbsIdentifier() {
  return "BOOL";
}

inline bool BoolFbsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, BoolFbsIdentifier());
}

inline bool VerifyBoolFbsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::BoolFbs>(BoolFbsIdentifier());
}

inline void FinishBoolFbsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::BoolFbs> root) {
  fbb.Finish(root, BoolFbsIdentifier());
}

}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_BOOL_SIMPLE_H_
