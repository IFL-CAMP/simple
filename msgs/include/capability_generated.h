// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CAPABILITY_SIMPLE_H_
#define FLATBUFFERS_GENERATED_CAPABILITY_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace simple {

struct capability;

struct capability FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPENAMES = 4,
    VT_HEADER = 6
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *typenames() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_TYPENAMES);
  }
  const header *Header() const {
    return GetPointer<const header *>(VT_HEADER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPENAMES) &&
           verifier.Verify(typenames()) &&
           verifier.VerifyVectorOfStrings(typenames()) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(Header()) &&
           verifier.EndTable();
  }
};

struct capabilityBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_typenames(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> typenames) {
    fbb_.AddOffset(capability::VT_TYPENAMES, typenames);
  }
  void add_Header(flatbuffers::Offset<header> Header) {
    fbb_.AddOffset(capability::VT_HEADER, Header);
  }
  explicit capabilityBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  capabilityBuilder &operator=(const capabilityBuilder &);
  flatbuffers::Offset<capability> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<capability>(end);
    return o;
  }
};

inline flatbuffers::Offset<capability> Createcapability(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> typenames = 0,
    flatbuffers::Offset<header> Header = 0) {
  capabilityBuilder builder_(_fbb);
  builder_.add_Header(Header);
  builder_.add_typenames(typenames);
  return builder_.Finish();
}

inline flatbuffers::Offset<capability> CreatecapabilityDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *typenames = nullptr,
    flatbuffers::Offset<header> Header = 0) {
  return simple::Createcapability(
      _fbb,
      typenames ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*typenames) : 0,
      Header);
}

inline const simple::capability *Getcapability(const void *buf) {
  return flatbuffers::GetRoot<simple::capability>(buf);
}

inline const char *capabilityIdentifier() {
  return "CPBL";
}

inline bool capabilityBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, capabilityIdentifier());
}

inline bool VerifycapabilityBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::capability>(capabilityIdentifier());
}

inline void FinishcapabilityBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::capability> root) {
  fbb.Finish(root, capabilityIdentifier());
}

}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_CAPABILITY_SIMPLE_H_
