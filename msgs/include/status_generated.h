// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STATUS_SIMPLE_H_
#define FLATBUFFERS_GENERATED_STATUS_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace simple {

struct status;

struct status FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_STATUSCODE = 4,
    VT_SUBCODE = 6,
    VT_ERRORNAME = 8,
    VT_ERRORMSG = 10,
    VT_HEADER = 12
  };
  int32_t statusCode() const {
    return GetField<int32_t>(VT_STATUSCODE, 0);
  }
  int32_t subCode() const {
    return GetField<int32_t>(VT_SUBCODE, 0);
  }
  const flatbuffers::String *errorName() const {
    return GetPointer<const flatbuffers::String *>(VT_ERRORNAME);
  }
  const flatbuffers::String *errorMsg() const {
    return GetPointer<const flatbuffers::String *>(VT_ERRORMSG);
  }
  const header *Header() const {
    return GetPointer<const header *>(VT_HEADER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_STATUSCODE) &&
           VerifyField<int32_t>(verifier, VT_SUBCODE) &&
           VerifyOffset(verifier, VT_ERRORNAME) &&
           verifier.Verify(errorName()) &&
           VerifyOffset(verifier, VT_ERRORMSG) &&
           verifier.Verify(errorMsg()) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(Header()) &&
           verifier.EndTable();
  }
};

struct statusBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_statusCode(int32_t statusCode) {
    fbb_.AddElement<int32_t>(status::VT_STATUSCODE, statusCode, 0);
  }
  void add_subCode(int32_t subCode) {
    fbb_.AddElement<int32_t>(status::VT_SUBCODE, subCode, 0);
  }
  void add_errorName(flatbuffers::Offset<flatbuffers::String> errorName) {
    fbb_.AddOffset(status::VT_ERRORNAME, errorName);
  }
  void add_errorMsg(flatbuffers::Offset<flatbuffers::String> errorMsg) {
    fbb_.AddOffset(status::VT_ERRORMSG, errorMsg);
  }
  void add_Header(flatbuffers::Offset<header> Header) {
    fbb_.AddOffset(status::VT_HEADER, Header);
  }
  explicit statusBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  statusBuilder &operator=(const statusBuilder &);
  flatbuffers::Offset<status> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<status>(end);
    return o;
  }
};

inline flatbuffers::Offset<status> Createstatus(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t statusCode = 0,
    int32_t subCode = 0,
    flatbuffers::Offset<flatbuffers::String> errorName = 0,
    flatbuffers::Offset<flatbuffers::String> errorMsg = 0,
    flatbuffers::Offset<header> Header = 0) {
  statusBuilder builder_(_fbb);
  builder_.add_Header(Header);
  builder_.add_errorMsg(errorMsg);
  builder_.add_errorName(errorName);
  builder_.add_subCode(subCode);
  builder_.add_statusCode(statusCode);
  return builder_.Finish();
}

inline flatbuffers::Offset<status> CreatestatusDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t statusCode = 0,
    int32_t subCode = 0,
    const char *errorName = nullptr,
    const char *errorMsg = nullptr,
    flatbuffers::Offset<header> Header = 0) {
  return simple::Createstatus(
      _fbb,
      statusCode,
      subCode,
      errorName ? _fbb.CreateString(errorName) : 0,
      errorMsg ? _fbb.CreateString(errorMsg) : 0,
      Header);
}

inline const simple::status *Getstatus(const void *buf) {
  return flatbuffers::GetRoot<simple::status>(buf);
}

inline const char *statusIdentifier() {
  return "STAT";
}

inline bool statusBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, statusIdentifier());
}

inline bool VerifystatusBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::status>(statusIdentifier());
}

inline void FinishstatusBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::status> root) {
  fbb.Finish(root, statusIdentifier());
}

}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_STATUS_SIMPLE_H_
