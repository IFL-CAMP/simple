// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_STRING_SIMPLE_H_
#define FLATBUFFERS_GENERATED_STRING_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

namespace simple {

struct StringFbs;

struct StringFbs FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::String *data() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.Verify(data()) &&
           verifier.EndTable();
  }
};

struct StringFbsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::String> data) {
    fbb_.AddOffset(StringFbs::VT_DATA, data);
  }
  explicit StringFbsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StringFbsBuilder &operator=(const StringFbsBuilder &);
  flatbuffers::Offset<StringFbs> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<StringFbs>(end);
    return o;
  }
};

inline flatbuffers::Offset<StringFbs> CreateStringFbs(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> data = 0) {
  StringFbsBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<StringFbs> CreateStringFbsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *data = nullptr) {
  return simple::CreateStringFbs(
      _fbb,
      data ? _fbb.CreateString(data) : 0);
}

inline const simple::StringFbs *GetStringFbs(const void *buf) {
  return flatbuffers::GetRoot<simple::StringFbs>(buf);
}

inline const char *StringFbsIdentifier() {
  return "STRG";
}

inline bool StringFbsBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, StringFbsIdentifier());
}

inline bool VerifyStringFbsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::StringFbs>(StringFbsIdentifier());
}

inline void FinishStringFbsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::StringFbs> root) {
  fbb.Finish(root, StringFbsIdentifier());
}

}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_STRING_SIMPLE_H_
