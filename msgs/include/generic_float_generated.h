// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GENERICFLOAT_SIMPLE_H_
#define FLATBUFFERS_GENERATED_GENERICFLOAT_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace simple {

struct generic_float;

struct generic_float FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4,
    VT_HEADER = 6
  };
  float data() const {
    return GetField<float>(VT_DATA, 0.0f);
  }
  const header *Header() const {
    return GetPointer<const header *>(VT_HEADER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_DATA) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(Header()) &&
           verifier.EndTable();
  }
};

struct generic_floatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(float data) {
    fbb_.AddElement<float>(generic_float::VT_DATA, data, 0.0f);
  }
  void add_Header(flatbuffers::Offset<header> Header) {
    fbb_.AddOffset(generic_float::VT_HEADER, Header);
  }
  explicit generic_floatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  generic_floatBuilder &operator=(const generic_floatBuilder &);
  flatbuffers::Offset<generic_float> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<generic_float>(end);
    return o;
  }
};

inline flatbuffers::Offset<generic_float> Creategeneric_float(
    flatbuffers::FlatBufferBuilder &_fbb,
    float data = 0.0f,
    flatbuffers::Offset<header> Header = 0) {
  generic_floatBuilder builder_(_fbb);
  builder_.add_Header(Header);
  builder_.add_data(data);
  return builder_.Finish();
}

inline const simple::generic_float *Getgeneric_float(const void *buf) {
  return flatbuffers::GetRoot<simple::generic_float>(buf);
}

inline const char *generic_floatIdentifier() {
  return "FLOT";
}

inline bool generic_floatBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, generic_floatIdentifier());
}

inline bool Verifygeneric_floatBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::generic_float>(generic_floatIdentifier());
}

inline void Finishgeneric_floatBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::generic_float> root) {
  fbb.Finish(root, generic_floatIdentifier());
}

}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_GENERICFLOAT_SIMPLE_H_
