// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINT_SIMPLE_MSGS_H_
#define FLATBUFFERS_GENERATED_POINT_SIMPLE_MSGS_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace simple_msgs {

struct point;

struct point_stamped;

MANUALLY_ALIGNED_STRUCT(8) point FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  point() {
    memset(this, 0, sizeof(point));
  }
  point(double _x, double _y, double _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
STRUCT_END(point, 24);

struct point_stamped FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POINTS = 4,
    VT_HEADER = 6
  };
  uint8_t points() const {
    return GetField<uint8_t>(VT_POINTS, 0);
  }
  uint8_t Header() const {
    return GetField<uint8_t>(VT_HEADER, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_POINTS) &&
           VerifyField<uint8_t>(verifier, VT_HEADER) &&
           verifier.EndTable();
  }
};

struct point_stampedBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_points(uint8_t points) {
    fbb_.AddElement<uint8_t>(point_stamped::VT_POINTS, points, 0);
  }
  void add_Header(uint8_t Header) {
    fbb_.AddElement<uint8_t>(point_stamped::VT_HEADER, Header, 0);
  }
  explicit point_stampedBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  point_stampedBuilder &operator=(const point_stampedBuilder &);
  flatbuffers::Offset<point_stamped> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<point_stamped>(end);
    return o;
  }
};

inline flatbuffers::Offset<point_stamped> Createpoint_stamped(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint8_t points = 0,
    uint8_t Header = 0) {
  point_stampedBuilder builder_(_fbb);
  builder_.add_Header(Header);
  builder_.add_points(points);
  return builder_.Finish();
}

inline const simple_msgs::point_stamped *Getpoint_stamped(const void *buf) {
  return flatbuffers::GetRoot<simple_msgs::point_stamped>(buf);
}

inline const char *point_stampedIdentifier() {
  return "POIT";
}

inline bool point_stampedBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, point_stampedIdentifier());
}

inline bool Verifypoint_stampedBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple_msgs::point_stamped>(point_stampedIdentifier());
}

inline void Finishpoint_stampedBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple_msgs::point_stamped> root) {
  fbb.Finish(root, point_stampedIdentifier());
}

}  // namespace simple_msgs

#endif  // FLATBUFFERS_GENERATED_POINT_SIMPLE_MSGS_H_
