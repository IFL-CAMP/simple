// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GENERICINT_SIMPLE_H_
#define FLATBUFFERS_GENERATED_GENERICINT_SIMPLE_H_

#include "flatbuffers/flatbuffers.h"

#include "header_generated.h"

namespace simple {

struct generic_int;

struct generic_int FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4,
    VT_HEADER = 6
  };
  int32_t data() const {
    return GetField<int32_t>(VT_DATA, 0);
  }
  const header *Header() const {
    return GetPointer<const header *>(VT_HEADER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_DATA) &&
           VerifyOffset(verifier, VT_HEADER) &&
           verifier.VerifyTable(Header()) &&
           verifier.EndTable();
  }
};

struct generic_intBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(int32_t data) {
    fbb_.AddElement<int32_t>(generic_int::VT_DATA, data, 0);
  }
  void add_Header(flatbuffers::Offset<header> Header) {
    fbb_.AddOffset(generic_int::VT_HEADER, Header);
  }
  explicit generic_intBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  generic_intBuilder &operator=(const generic_intBuilder &);
  flatbuffers::Offset<generic_int> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<generic_int>(end);
    return o;
  }
};

inline flatbuffers::Offset<generic_int> Creategeneric_int(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t data = 0,
    flatbuffers::Offset<header> Header = 0) {
  generic_intBuilder builder_(_fbb);
  builder_.add_Header(Header);
  builder_.add_data(data);
  return builder_.Finish();
}

inline const simple::generic_int *Getgeneric_int(const void *buf) {
  return flatbuffers::GetRoot<simple::generic_int>(buf);
}

inline const char *generic_intIdentifier() {
  return "INTG";
}

inline bool generic_intBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, generic_intIdentifier());
}

inline bool Verifygeneric_intBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<simple::generic_int>(generic_intIdentifier());
}

inline void Finishgeneric_intBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<simple::generic_int> root) {
  fbb.Finish(root, generic_intIdentifier());
}

}  // namespace simple

#endif  // FLATBUFFERS_GENERATED_GENERICINT_SIMPLE_H_
