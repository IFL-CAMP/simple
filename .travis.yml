language: cpp
sudo: true

matrix:
  include:

    # Linux C++11 GCC build
    - os: linux
      compiler: gcc
      addons: &gcc5
        apt:
          sources: ['ubuntu-toolchain-r-test']
          packages: ['gcc-5', 'g++-5']
      env: MATRIX_EVAL="CC='gcc-5' && CXX='g++-5'" BUILD_TYPE='Release'

    # Linux C++11 Clang build
    - os: linux
      compiler: clang
      addons: &clang38
        apt:
          sources: ['llvm-toolchain-precise-3.8', 'ubuntu-toolchain-r-test']
          packages: ['clang-3.8']
      env: MATRIX_EVAL="CXX='clang++-3.8'" BUILD_TYPE='Release'

    # OSX C++11 Clang Builds
    - os: osx
      osx_image: xcode8.3
      compiler: clang
      env: MATRIX_EVAL="CXX='clang++'" BUILD_TYPE='Release'
      
before_install:
  - eval "${MATRIX_EVAL}"
  
install:
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      # Install CMake 3.3
      CMAKE_URL="http://www.cmake.org/files/v3.3/cmake-3.3.2-Linux-x86_64.tar.gz"
      mkdir -p cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    elif [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      which cmake || brew install cmake
    fi
  - |
    if [[ "${CXX}" == "g++-5" ]]; then
      # Install LCOV 1.11
      cd ${DEPS_DIR}
      wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz
      tar xf lcov_1.11.orig.tar.gz
      sudo make -C lcov-1.11/ install
    fi
  # Install Flatbuffers
  - cd ${DEPS_DIR}
  - git clone --branch v1.8.0 https://github.com/google/flatbuffers.git # Checkout the latest release
  - cd flatbuffers && mkdir -p flatbuffer_build && cd flatbuffer_build
  - cmake -DCMAKE_BUILD_TYPE=Release ..
  - sudo make -j8 install
  # Install Zeromq
  - cd ${DEPS_DIR}
  - git clone https://github.com/zeromq/libzmq.git # Pull libzmq (currently from master) and build it
  - cd libzmq && mkdir -p libzmq_build && cd libzmq_build
  - cmake -DCMAKE_BUILD_TYPE=Release -DZMQ_BUILD_TESTS=OFF ..
  - sudo make -j8 install

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - |
    if [[ "${CXX}" == "g++-5" ]]; then
      lcov --directory . --zerocounters
    fi
  - mkdir -p build && cd build
  - cmake .. -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DBUILD_TESTS=ON -DBUILD_EXAMPLES=ON

script:
  - make -j8
  - ctest -R simple_tests -C Release --output-on-failure
  
after_success:
  - |
      if [ "${CXX}" == "g++-5" ]; then
        # Generate code coverage information & send to Coveralls
        lcov --gcov-tool gcov-5 --directory ${TRAVIS_BUILD_DIR}/build --capture --output-file coverage.info
        lcov --remove coverage.info 'tests/*' 'msgs/include/simple_msgs/generated/*' '/usr/*' --output-file coverage.info
        lcov --list coverage.info
        bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"
        fi
