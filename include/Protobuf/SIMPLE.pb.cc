// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SIMPLE.proto

#include "SIMPLE.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
namespace SIMPLE {
class BASEMSGDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BASEMSG>
      _instance;
  const ::SIMPLE::STATUS* status_;
  const ::SIMPLE::CAPABILITY* capability_;
  const ::SIMPLE::IMAGE* image_;
  const ::SIMPLE::TRANSFORM* transform_;
  const ::SIMPLE::POSITION* position_;
  const ::SIMPLE::GENERIC* gener_;
} _BASEMSG_default_instance_;
class HEADERDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HEADER>
      _instance;
} _HEADER_default_instance_;
class STATUSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<STATUS>
      _instance;
} _STATUS_default_instance_;
class CAPABILITYDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CAPABILITY>
      _instance;
} _CAPABILITY_default_instance_;
class PosDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Pos>
      _instance;
} _Pos_default_instance_;
class OrientationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Orientation>
      _instance;
} _Orientation_default_instance_;
class QuaternionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Quaternion>
      _instance;
} _Quaternion_default_instance_;
class POSITIONDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<POSITION>
      _instance;
} _POSITION_default_instance_;
class TRANSFORMDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TRANSFORM>
      _instance;
} _TRANSFORM_default_instance_;
class IMAGE_METRICSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMAGE_METRICS>
      _instance;
} _IMAGE_METRICS_default_instance_;
class IMAGE_SUBVOLUMEDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMAGE_SUBVOLUME>
      _instance;
} _IMAGE_SUBVOLUME_default_instance_;
class IMAGE_imageArrayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMAGE_imageArray>
      _instance;
} _IMAGE_imageArray_default_instance_;
class IMAGEDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IMAGE>
      _instance;
} _IMAGE_default_instance_;
class GENERICDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GENERIC>
      _instance;
  bool basicbool_;
  ::google::protobuf::int32 basicint_;
  float basicfloat_;
  double basicdouble_;
  ::google::protobuf::internal::ArenaStringPtr basicstring_;
} _GENERIC_default_instance_;
}  // namespace SIMPLE
namespace protobuf_SIMPLE_2eproto {
void InitDefaultsBASEMSGImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_SIMPLE_2eproto::InitDefaultsSTATUS();
  protobuf_SIMPLE_2eproto::InitDefaultsCAPABILITY();
  protobuf_SIMPLE_2eproto::InitDefaultsIMAGE();
  protobuf_SIMPLE_2eproto::InitDefaultsTRANSFORM();
  protobuf_SIMPLE_2eproto::InitDefaultsPOSITION();
  protobuf_SIMPLE_2eproto::InitDefaultsGENERIC();
  protobuf_SIMPLE_2eproto::InitDefaultsHEADER();
  {
    void* ptr = &::SIMPLE::_BASEMSG_default_instance_;
    new (ptr) ::SIMPLE::BASEMSG();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::BASEMSG::InitAsDefaultInstance();
}

void InitDefaultsBASEMSG() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBASEMSGImpl);
}

void InitDefaultsHEADERImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::SIMPLE::_HEADER_default_instance_;
    new (ptr) ::SIMPLE::HEADER();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::HEADER::InitAsDefaultInstance();
}

void InitDefaultsHEADER() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHEADERImpl);
}

void InitDefaultsSTATUSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::SIMPLE::_STATUS_default_instance_;
    new (ptr) ::SIMPLE::STATUS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::STATUS::InitAsDefaultInstance();
}

void InitDefaultsSTATUS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSTATUSImpl);
}

void InitDefaultsCAPABILITYImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::SIMPLE::_CAPABILITY_default_instance_;
    new (ptr) ::SIMPLE::CAPABILITY();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::CAPABILITY::InitAsDefaultInstance();
}

void InitDefaultsCAPABILITY() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCAPABILITYImpl);
}

void InitDefaultsPosImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::SIMPLE::_Pos_default_instance_;
    new (ptr) ::SIMPLE::Pos();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::Pos::InitAsDefaultInstance();
}

void InitDefaultsPos() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPosImpl);
}

void InitDefaultsOrientationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::SIMPLE::_Orientation_default_instance_;
    new (ptr) ::SIMPLE::Orientation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::Orientation::InitAsDefaultInstance();
}

void InitDefaultsOrientation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsOrientationImpl);
}

void InitDefaultsQuaternionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::SIMPLE::_Quaternion_default_instance_;
    new (ptr) ::SIMPLE::Quaternion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::Quaternion::InitAsDefaultInstance();
}

void InitDefaultsQuaternion() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQuaternionImpl);
}

void InitDefaultsPOSITIONImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_SIMPLE_2eproto::InitDefaultsPos();
  protobuf_SIMPLE_2eproto::InitDefaultsQuaternion();
  {
    void* ptr = &::SIMPLE::_POSITION_default_instance_;
    new (ptr) ::SIMPLE::POSITION();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::POSITION::InitAsDefaultInstance();
}

void InitDefaultsPOSITION() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPOSITIONImpl);
}

void InitDefaultsTRANSFORMImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_SIMPLE_2eproto::InitDefaultsPos();
  protobuf_SIMPLE_2eproto::InitDefaultsOrientation();
  {
    void* ptr = &::SIMPLE::_TRANSFORM_default_instance_;
    new (ptr) ::SIMPLE::TRANSFORM();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::TRANSFORM::InitAsDefaultInstance();
}

void InitDefaultsTRANSFORM() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTRANSFORMImpl);
}

void InitDefaultsIMAGE_METRICSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_SIMPLE_2eproto::InitDefaultsPos();
  protobuf_SIMPLE_2eproto::InitDefaultsOrientation();
  {
    void* ptr = &::SIMPLE::_IMAGE_METRICS_default_instance_;
    new (ptr) ::SIMPLE::IMAGE_METRICS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::IMAGE_METRICS::InitAsDefaultInstance();
}

void InitDefaultsIMAGE_METRICS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMAGE_METRICSImpl);
}

void InitDefaultsIMAGE_SUBVOLUMEImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::SIMPLE::_IMAGE_SUBVOLUME_default_instance_;
    new (ptr) ::SIMPLE::IMAGE_SUBVOLUME();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::IMAGE_SUBVOLUME::InitAsDefaultInstance();
}

void InitDefaultsIMAGE_SUBVOLUME() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMAGE_SUBVOLUMEImpl);
}

void InitDefaultsIMAGE_imageArrayImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::SIMPLE::_IMAGE_imageArray_default_instance_;
    new (ptr) ::SIMPLE::IMAGE_imageArray();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::IMAGE_imageArray::InitAsDefaultInstance();
}

void InitDefaultsIMAGE_imageArray() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMAGE_imageArrayImpl);
}

void InitDefaultsIMAGEImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  protobuf_SIMPLE_2eproto::InitDefaultsIMAGE_METRICS();
  protobuf_SIMPLE_2eproto::InitDefaultsIMAGE_SUBVOLUME();
  protobuf_SIMPLE_2eproto::InitDefaultsIMAGE_imageArray();
  {
    void* ptr = &::SIMPLE::_IMAGE_default_instance_;
    new (ptr) ::SIMPLE::IMAGE();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::IMAGE::InitAsDefaultInstance();
}

void InitDefaultsIMAGE() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsIMAGEImpl);
}

void InitDefaultsGENERICImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  {
    void* ptr = &::SIMPLE::_GENERIC_default_instance_;
    new (ptr) ::SIMPLE::GENERIC();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SIMPLE::GENERIC::InitAsDefaultInstance();
}

void InitDefaultsGENERIC() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGENERICImpl);
}

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::BASEMSG, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::BASEMSG, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::BASEMSG, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::BASEMSG, flag_),
  offsetof(::SIMPLE::BASEMSGDefaultTypeInternal, status_),
  offsetof(::SIMPLE::BASEMSGDefaultTypeInternal, capability_),
  offsetof(::SIMPLE::BASEMSGDefaultTypeInternal, image_),
  offsetof(::SIMPLE::BASEMSGDefaultTypeInternal, transform_),
  offsetof(::SIMPLE::BASEMSGDefaultTypeInternal, position_),
  offsetof(::SIMPLE::BASEMSGDefaultTypeInternal, gener_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::BASEMSG, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::BASEMSG, data_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::HEADER, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::HEADER, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::HEADER, versionnumber_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::HEADER, datatypename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::HEADER, devicename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::HEADER, timestamp_),
  3,
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::STATUS, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::STATUS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::STATUS, statuscode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::STATUS, subcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::STATUS, errorname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::STATUS, errormsg_),
  3,
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::CAPABILITY, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::CAPABILITY, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::CAPABILITY, messagename_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Pos, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Pos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Pos, px_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Pos, py_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Pos, pz_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, r11_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, r12_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, r13_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, r21_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, r22_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, r23_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, r31_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, r32_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Orientation, r33_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Quaternion, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Quaternion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Quaternion, qi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Quaternion, qj_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Quaternion, qk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::Quaternion, qr_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::POSITION, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::POSITION, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::POSITION, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::POSITION, orient_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::TRANSFORM, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::TRANSFORM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::TRANSFORM, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::TRANSFORM, orient_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_METRICS, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_METRICS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_METRICS, voxelsize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_METRICS, cos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_METRICS, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_METRICS, orient_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_METRICS, matrixsizex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_METRICS, matrixsizey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_METRICS, matrixsizez_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_METRICS, type_),
  2,
  3,
  0,
  1,
  4,
  5,
  6,
  7,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_SUBVOLUME, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_SUBVOLUME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_SUBVOLUME, cornervoxelidxx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_SUBVOLUME, cornervoxelidxy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_SUBVOLUME, cornervoxelidxz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_SUBVOLUME, numvoxelx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_SUBVOLUME, numvoxely_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_SUBVOLUME, numvoxelz_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_imageArray, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_imageArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_imageArray, datared_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_imageArray, datagreen_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_imageArray, datablue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE_imageArray, data_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE, metric_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE, subvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE, existsubvolume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::IMAGE, imagedata_),
  0,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::GENERIC, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::GENERIC, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::GENERIC, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::SIMPLE::GENERICDefaultTypeInternal, basicbool_),
  offsetof(::SIMPLE::GENERICDefaultTypeInternal, basicint_),
  offsetof(::SIMPLE::GENERICDefaultTypeInternal, basicfloat_),
  offsetof(::SIMPLE::GENERICDefaultTypeInternal, basicdouble_),
  offsetof(::SIMPLE::GENERICDefaultTypeInternal, basicstring_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SIMPLE::GENERIC, data_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::SIMPLE::BASEMSG)},
  { 22, 31, sizeof(::SIMPLE::HEADER)},
  { 35, 44, sizeof(::SIMPLE::STATUS)},
  { 48, 54, sizeof(::SIMPLE::CAPABILITY)},
  { 55, 63, sizeof(::SIMPLE::Pos)},
  { 66, 80, sizeof(::SIMPLE::Orientation)},
  { 89, 98, sizeof(::SIMPLE::Quaternion)},
  { 102, 109, sizeof(::SIMPLE::POSITION)},
  { 111, 118, sizeof(::SIMPLE::TRANSFORM)},
  { 120, 133, sizeof(::SIMPLE::IMAGE_METRICS)},
  { 141, 152, sizeof(::SIMPLE::IMAGE_SUBVOLUME)},
  { 158, 167, sizeof(::SIMPLE::IMAGE_imageArray)},
  { 171, 180, sizeof(::SIMPLE::IMAGE)},
  { 184, 195, sizeof(::SIMPLE::GENERIC)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_BASEMSG_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_HEADER_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_STATUS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_CAPABILITY_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_Pos_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_Orientation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_Quaternion_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_POSITION_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_TRANSFORM_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_IMAGE_METRICS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_IMAGE_SUBVOLUME_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_IMAGE_imageArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_IMAGE_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::SIMPLE::_GENERIC_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "SIMPLE.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014SIMPLE.proto\022\006SIMPLE\"\233\002\n\007BASEMSG\022\014\n\004fl"
      "ag\030\001 \002(\t\022 \n\006status\030\002 \001(\0132\016.SIMPLE.STATUS"
      "H\000\022(\n\ncapability\030\003 \001(\0132\022.SIMPLE.CAPABILI"
      "TYH\000\022\036\n\005image\030\004 \001(\0132\r.SIMPLE.IMAGEH\000\022&\n\t"
      "transform\030\005 \001(\0132\021.SIMPLE.TRANSFORMH\000\022$\n\010"
      "position\030\006 \001(\0132\020.SIMPLE.POSITIONH\000\022 \n\005ge"
      "ner\030\007 \001(\0132\017.SIMPLE.GENERICH\000\022\036\n\006header\030\010"
      " \002(\0132\016.SIMPLE.HEADERB\006\n\004data\"\\\n\006HEADER\022\025"
      "\n\rVersionNumber\030\001 \001(\005\022\024\n\014dataTypeName\030\002 "
      "\001(\t\022\022\n\ndeviceName\030\003 \001(\t\022\021\n\ttimeStamp\030\004 \001"
      "(\001\"R\n\006STATUS\022\022\n\nstatusCode\030\001 \001(\005\022\017\n\007subc"
      "ode\030\002 \001(\003\022\021\n\terrorName\030\003 \001(\t\022\020\n\010errorMsg"
      "\030\004 \001(\t\"!\n\nCAPABILITY\022\023\n\013messageName\030\001 \003("
      "\t\")\n\003Pos\022\n\n\002px\030\001 \001(\001\022\n\n\002py\030\002 \001(\001\022\n\n\002pz\030\003"
      " \001(\001\"\202\001\n\013Orientation\022\013\n\003r11\030\001 \001(\001\022\013\n\003r12"
      "\030\002 \001(\001\022\013\n\003r13\030\003 \001(\001\022\013\n\003r21\030\004 \001(\001\022\013\n\003r22\030"
      "\005 \001(\001\022\013\n\003r23\030\006 \001(\001\022\013\n\003r31\030\007 \001(\001\022\013\n\003r32\030\010"
      " \001(\001\022\013\n\003r33\030\t \001(\001\"<\n\nQuaternion\022\n\n\002qi\030\001 "
      "\001(\001\022\n\n\002qj\030\002 \001(\001\022\n\n\002qk\030\003 \001(\001\022\n\n\002qr\030\004 \001(\001\""
      "M\n\010POSITION\022\035\n\010position\030\001 \001(\0132\013.SIMPLE.P"
      "os\022\"\n\006orient\030\002 \001(\0132\022.SIMPLE.Quaternion\"O"
      "\n\tTRANSFORM\022\035\n\010position\030\001 \001(\0132\013.SIMPLE.P"
      "os\022#\n\006orient\030\002 \001(\0132\023.SIMPLE.Orientation\""
      "\275\005\n\005IMAGE\022%\n\006metric\030\001 \001(\0132\025.SIMPLE.IMAGE"
      ".METRICS\022*\n\tsubvolume\030\002 \001(\0132\027.SIMPLE.IMA"
      "GE.SUBVOLUME\022\026\n\016existSUBVOLUME\030\003 \001(\010\022+\n\t"
      "imageData\030\004 \001(\0132\030.SIMPLE.IMAGE.imageArra"
      "y\032\267\002\n\007METRICS\022\021\n\tvoxelSize\030\001 \001(\001\022*\n\003COS\030"
      "\002 \001(\0162\035.SIMPLE.IMAGE.METRICS.COStype\022\035\n\010"
      "position\030\003 \001(\0132\013.SIMPLE.Pos\022#\n\006orient\030\004 "
      "\001(\0132\023.SIMPLE.Orientation\022\023\n\013matrixSizeX\030"
      "\005 \001(\005\022\023\n\013matrixSizeY\030\006 \001(\005\022\023\n\013matrixSize"
      "Z\030\007 \001(\005\022,\n\004type\030\010 \001(\0162\036.SIMPLE.IMAGE.MET"
      "RICS.dataType\"\033\n\007COStype\022\007\n\003LPS\020\000\022\007\n\003RAS"
      "\020\001\"\037\n\010dataType\022\007\n\003RGB\020\000\022\n\n\006SCALAR\020\001\032\217\001\n\t"
      "SUBVOLUME\022\027\n\017cornerVoxelIdxX\030\001 \001(\005\022\027\n\017co"
      "rnerVoxelIdxY\030\002 \001(\005\022\027\n\017cornerVoxelIdxZ\030\003"
      " \001(\005\022\021\n\tnumVoxelX\030\004 \001(\005\022\021\n\tnumVoxelY\030\005 \001"
      "(\005\022\021\n\tnumVoxelZ\030\006 \001(\005\032P\n\nimageArray\022\017\n\007d"
      "ataRed\030\001 \001(\014\022\021\n\tdataGreen\030\002 \001(\014\022\020\n\010dataB"
      "lue\030\003 \001(\014\022\014\n\004data\030\004 \001(\014\"~\n\007GENERIC\022\023\n\tba"
      "sicBool\030\001 \001(\010H\000\022\022\n\010basicInt\030\002 \001(\005H\000\022\024\n\nb"
      "asicFloat\030\003 \001(\002H\000\022\025\n\013basicDouble\030\004 \001(\001H\000"
      "\022\025\n\013basicString\030\005 \001(\tH\000B\006\n\004data"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1751);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SIMPLE.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_SIMPLE_2eproto
namespace SIMPLE {
const ::google::protobuf::EnumDescriptor* IMAGE_METRICS_COStype_descriptor() {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SIMPLE_2eproto::file_level_enum_descriptors[0];
}
bool IMAGE_METRICS_COStype_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IMAGE_METRICS_COStype IMAGE_METRICS::LPS;
const IMAGE_METRICS_COStype IMAGE_METRICS::RAS;
const IMAGE_METRICS_COStype IMAGE_METRICS::COStype_MIN;
const IMAGE_METRICS_COStype IMAGE_METRICS::COStype_MAX;
const int IMAGE_METRICS::COStype_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* IMAGE_METRICS_dataType_descriptor() {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_SIMPLE_2eproto::file_level_enum_descriptors[1];
}
bool IMAGE_METRICS_dataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IMAGE_METRICS_dataType IMAGE_METRICS::RGB;
const IMAGE_METRICS_dataType IMAGE_METRICS::SCALAR;
const IMAGE_METRICS_dataType IMAGE_METRICS::dataType_MIN;
const IMAGE_METRICS_dataType IMAGE_METRICS::dataType_MAX;
const int IMAGE_METRICS::dataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void BASEMSG::InitAsDefaultInstance() {
  ::SIMPLE::_BASEMSG_default_instance_.status_ = const_cast< ::SIMPLE::STATUS*>(
      ::SIMPLE::STATUS::internal_default_instance());
  ::SIMPLE::_BASEMSG_default_instance_.capability_ = const_cast< ::SIMPLE::CAPABILITY*>(
      ::SIMPLE::CAPABILITY::internal_default_instance());
  ::SIMPLE::_BASEMSG_default_instance_.image_ = const_cast< ::SIMPLE::IMAGE*>(
      ::SIMPLE::IMAGE::internal_default_instance());
  ::SIMPLE::_BASEMSG_default_instance_.transform_ = const_cast< ::SIMPLE::TRANSFORM*>(
      ::SIMPLE::TRANSFORM::internal_default_instance());
  ::SIMPLE::_BASEMSG_default_instance_.position_ = const_cast< ::SIMPLE::POSITION*>(
      ::SIMPLE::POSITION::internal_default_instance());
  ::SIMPLE::_BASEMSG_default_instance_.gener_ = const_cast< ::SIMPLE::GENERIC*>(
      ::SIMPLE::GENERIC::internal_default_instance());
  ::SIMPLE::_BASEMSG_default_instance_._instance.get_mutable()->header_ = const_cast< ::SIMPLE::HEADER*>(
      ::SIMPLE::HEADER::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BASEMSG::kFlagFieldNumber;
const int BASEMSG::kStatusFieldNumber;
const int BASEMSG::kCapabilityFieldNumber;
const int BASEMSG::kImageFieldNumber;
const int BASEMSG::kTransformFieldNumber;
const int BASEMSG::kPositionFieldNumber;
const int BASEMSG::kGenerFieldNumber;
const int BASEMSG::kHeaderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BASEMSG::BASEMSG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsBASEMSG();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.BASEMSG)
}
BASEMSG::BASEMSG(const BASEMSG& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_flag()) {
    flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flag_);
  }
  if (from.has_header()) {
    header_ = new ::SIMPLE::HEADER(*from.header_);
  } else {
    header_ = NULL;
  }
  clear_has_data();
  switch (from.data_case()) {
    case kStatus: {
      mutable_status()->::SIMPLE::STATUS::MergeFrom(from.status());
      break;
    }
    case kCapability: {
      mutable_capability()->::SIMPLE::CAPABILITY::MergeFrom(from.capability());
      break;
    }
    case kImage: {
      mutable_image()->::SIMPLE::IMAGE::MergeFrom(from.image());
      break;
    }
    case kTransform: {
      mutable_transform()->::SIMPLE::TRANSFORM::MergeFrom(from.transform());
      break;
    }
    case kPosition: {
      mutable_position()->::SIMPLE::POSITION::MergeFrom(from.position());
      break;
    }
    case kGener: {
      mutable_gener()->::SIMPLE::GENERIC::MergeFrom(from.gener());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SIMPLE.BASEMSG)
}

void BASEMSG::SharedCtor() {
  _cached_size_ = 0;
  flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
  clear_has_data();
}

BASEMSG::~BASEMSG() {
  // @@protoc_insertion_point(destructor:SIMPLE.BASEMSG)
  SharedDtor();
}

void BASEMSG::SharedDtor() {
  flag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (has_data()) {
    clear_data();
  }
}

void BASEMSG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BASEMSG::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BASEMSG& BASEMSG::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsBASEMSG();
  return *internal_default_instance();
}

BASEMSG* BASEMSG::New(::google::protobuf::Arena* arena) const {
  BASEMSG* n = new BASEMSG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BASEMSG::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:SIMPLE.BASEMSG)
  switch (data_case()) {
    case kStatus: {
      delete data_.status_;
      break;
    }
    case kCapability: {
      delete data_.capability_;
      break;
    }
    case kImage: {
      delete data_.image_;
      break;
    }
    case kTransform: {
      delete data_.transform_;
      break;
    }
    case kPosition: {
      delete data_.position_;
      break;
    }
    case kGener: {
      delete data_.gener_;
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void BASEMSG::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.BASEMSG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!flag_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*flag_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::SIMPLE::HEADER::Clear();
    }
  }
  clear_data();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BASEMSG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.BASEMSG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->flag().data(), static_cast<int>(this->flag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SIMPLE.BASEMSG.flag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.STATUS status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.CAPABILITY capability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_capability()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.IMAGE image = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.TRANSFORM transform = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transform()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.POSITION position = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.GENERIC gener = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gener()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SIMPLE.HEADER header = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.BASEMSG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.BASEMSG)
  return false;
#undef DO_
}

void BASEMSG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.BASEMSG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string flag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flag().data(), static_cast<int>(this->flag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.BASEMSG.flag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->flag(), output);
  }

  switch (data_case()) {
    case kStatus:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, *data_.status_, output);
      break;
    case kCapability:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, *data_.capability_, output);
      break;
    case kImage:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, *data_.image_, output);
      break;
    case kTransform:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, *data_.transform_, output);
      break;
    case kPosition:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, *data_.position_, output);
      break;
    case kGener:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, *data_.gener_, output);
      break;
    default: ;
  }
  // required .SIMPLE.HEADER header = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->header_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.BASEMSG)
}

::google::protobuf::uint8* BASEMSG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.BASEMSG)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string flag = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->flag().data(), static_cast<int>(this->flag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.BASEMSG.flag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->flag(), target);
  }

  switch (data_case()) {
    case kStatus:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          2, *data_.status_, deterministic, target);
      break;
    case kCapability:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          3, *data_.capability_, deterministic, target);
      break;
    case kImage:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          4, *data_.image_, deterministic, target);
      break;
    case kTransform:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          5, *data_.transform_, deterministic, target);
      break;
    case kPosition:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          6, *data_.position_, deterministic, target);
      break;
    case kGener:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageNoVirtualToArray(
          7, *data_.gener_, deterministic, target);
      break;
    default: ;
  }
  // required .SIMPLE.HEADER header = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->header_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.BASEMSG)
  return target;
}

size_t BASEMSG::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SIMPLE.BASEMSG)
  size_t total_size = 0;

  if (has_flag()) {
    // required string flag = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flag());
  }

  if (has_header()) {
    // required .SIMPLE.HEADER header = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  return total_size;
}
size_t BASEMSG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.BASEMSG)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string flag = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flag());

    // required .SIMPLE.HEADER header = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  switch (data_case()) {
    // optional .SIMPLE.STATUS status = 2;
    case kStatus: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.status_);
      break;
    }
    // optional .SIMPLE.CAPABILITY capability = 3;
    case kCapability: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.capability_);
      break;
    }
    // optional .SIMPLE.IMAGE image = 4;
    case kImage: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.image_);
      break;
    }
    // optional .SIMPLE.TRANSFORM transform = 5;
    case kTransform: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.transform_);
      break;
    }
    // optional .SIMPLE.POSITION position = 6;
    case kPosition: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.position_);
      break;
    }
    // optional .SIMPLE.GENERIC gener = 7;
    case kGener: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *data_.gener_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BASEMSG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.BASEMSG)
  GOOGLE_DCHECK_NE(&from, this);
  const BASEMSG* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BASEMSG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.BASEMSG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.BASEMSG)
    MergeFrom(*source);
  }
}

void BASEMSG::MergeFrom(const BASEMSG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.BASEMSG)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_flag();
      flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flag_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::SIMPLE::HEADER::MergeFrom(from.header());
    }
  }
  switch (from.data_case()) {
    case kStatus: {
      mutable_status()->::SIMPLE::STATUS::MergeFrom(from.status());
      break;
    }
    case kCapability: {
      mutable_capability()->::SIMPLE::CAPABILITY::MergeFrom(from.capability());
      break;
    }
    case kImage: {
      mutable_image()->::SIMPLE::IMAGE::MergeFrom(from.image());
      break;
    }
    case kTransform: {
      mutable_transform()->::SIMPLE::TRANSFORM::MergeFrom(from.transform());
      break;
    }
    case kPosition: {
      mutable_position()->::SIMPLE::POSITION::MergeFrom(from.position());
      break;
    }
    case kGener: {
      mutable_gener()->::SIMPLE::GENERIC::MergeFrom(from.gener());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void BASEMSG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.BASEMSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BASEMSG::CopyFrom(const BASEMSG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.BASEMSG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BASEMSG::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BASEMSG::Swap(BASEMSG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BASEMSG::InternalSwap(BASEMSG* other) {
  using std::swap;
  flag_.Swap(&other->flag_);
  swap(header_, other->header_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BASEMSG::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void HEADER::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HEADER::kVersionNumberFieldNumber;
const int HEADER::kDataTypeNameFieldNumber;
const int HEADER::kDeviceNameFieldNumber;
const int HEADER::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HEADER::HEADER()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsHEADER();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.HEADER)
}
HEADER::HEADER(const HEADER& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datatypename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_datatypename()) {
    datatypename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datatypename_);
  }
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_devicename()) {
    devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&versionnumber_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(versionnumber_));
  // @@protoc_insertion_point(copy_constructor:SIMPLE.HEADER)
}

void HEADER::SharedCtor() {
  _cached_size_ = 0;
  datatypename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&versionnumber_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(versionnumber_));
}

HEADER::~HEADER() {
  // @@protoc_insertion_point(destructor:SIMPLE.HEADER)
  SharedDtor();
}

void HEADER::SharedDtor() {
  datatypename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  devicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HEADER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HEADER::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HEADER& HEADER::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsHEADER();
  return *internal_default_instance();
}

HEADER* HEADER::New(::google::protobuf::Arena* arena) const {
  HEADER* n = new HEADER;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HEADER::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.HEADER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!datatypename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*datatypename_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!devicename_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*devicename_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&versionnumber_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(versionnumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HEADER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.HEADER)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 VersionNumber = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_versionnumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &versionnumber_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dataTypeName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datatypename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->datatypename().data(), static_cast<int>(this->datatypename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SIMPLE.HEADER.dataTypeName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string deviceName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_devicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->devicename().data(), static_cast<int>(this->devicename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SIMPLE.HEADER.deviceName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timeStamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.HEADER)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.HEADER)
  return false;
#undef DO_
}

void HEADER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.HEADER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 VersionNumber = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->versionnumber(), output);
  }

  // optional string dataTypeName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datatypename().data(), static_cast<int>(this->datatypename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.HEADER.dataTypeName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->datatypename(), output);
  }

  // optional string deviceName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), static_cast<int>(this->devicename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.HEADER.deviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->devicename(), output);
  }

  // optional double timeStamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.HEADER)
}

::google::protobuf::uint8* HEADER::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.HEADER)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 VersionNumber = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->versionnumber(), target);
  }

  // optional string dataTypeName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->datatypename().data(), static_cast<int>(this->datatypename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.HEADER.dataTypeName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->datatypename(), target);
  }

  // optional string deviceName = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->devicename().data(), static_cast<int>(this->devicename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.HEADER.deviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->devicename(), target);
  }

  // optional double timeStamp = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.HEADER)
  return target;
}

size_t HEADER::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.HEADER)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string dataTypeName = 2;
    if (has_datatypename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datatypename());
    }

    // optional string deviceName = 3;
    if (has_devicename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->devicename());
    }

    // optional double timeStamp = 4;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional int32 VersionNumber = 1;
    if (has_versionnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->versionnumber());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HEADER::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.HEADER)
  GOOGLE_DCHECK_NE(&from, this);
  const HEADER* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HEADER>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.HEADER)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.HEADER)
    MergeFrom(*source);
  }
}

void HEADER::MergeFrom(const HEADER& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.HEADER)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_datatypename();
      datatypename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datatypename_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_devicename();
      devicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.devicename_);
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000008u) {
      versionnumber_ = from.versionnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HEADER::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.HEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HEADER::CopyFrom(const HEADER& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.HEADER)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HEADER::IsInitialized() const {
  return true;
}

void HEADER::Swap(HEADER* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HEADER::InternalSwap(HEADER* other) {
  using std::swap;
  datatypename_.Swap(&other->datatypename_);
  devicename_.Swap(&other->devicename_);
  swap(timestamp_, other->timestamp_);
  swap(versionnumber_, other->versionnumber_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HEADER::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void STATUS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int STATUS::kStatusCodeFieldNumber;
const int STATUS::kSubcodeFieldNumber;
const int STATUS::kErrorNameFieldNumber;
const int STATUS::kErrorMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

STATUS::STATUS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsSTATUS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.STATUS)
}
STATUS::STATUS(const STATUS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errorname()) {
    errorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorname_);
  }
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_errormsg()) {
    errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
  }
  ::memcpy(&subcode_, &from.subcode_,
    static_cast<size_t>(reinterpret_cast<char*>(&statuscode_) -
    reinterpret_cast<char*>(&subcode_)) + sizeof(statuscode_));
  // @@protoc_insertion_point(copy_constructor:SIMPLE.STATUS)
}

void STATUS::SharedCtor() {
  _cached_size_ = 0;
  errorname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormsg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&subcode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&statuscode_) -
      reinterpret_cast<char*>(&subcode_)) + sizeof(statuscode_));
}

STATUS::~STATUS() {
  // @@protoc_insertion_point(destructor:SIMPLE.STATUS)
  SharedDtor();
}

void STATUS::SharedDtor() {
  errorname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  errormsg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void STATUS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* STATUS::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const STATUS& STATUS::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsSTATUS();
  return *internal_default_instance();
}

STATUS* STATUS::New(::google::protobuf::Arena* arena) const {
  STATUS* n = new STATUS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void STATUS::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.STATUS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!errorname_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*errorname_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!errormsg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*errormsg_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&subcode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&statuscode_) -
        reinterpret_cast<char*>(&subcode_)) + sizeof(statuscode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool STATUS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.STATUS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 statusCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_statuscode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statuscode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 subcode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_subcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &subcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string errorName = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errorname().data(), static_cast<int>(this->errorname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SIMPLE.STATUS.errorName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string errorMsg = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errormsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->errormsg().data(), static_cast<int>(this->errormsg().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SIMPLE.STATUS.errorMsg");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.STATUS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.STATUS)
  return false;
#undef DO_
}

void STATUS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.STATUS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 statusCode = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statuscode(), output);
  }

  // optional int64 subcode = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->subcode(), output);
  }

  // optional string errorName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errorname().data(), static_cast<int>(this->errorname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.STATUS.errorName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errorname(), output);
  }

  // optional string errorMsg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormsg().data(), static_cast<int>(this->errormsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.STATUS.errorMsg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->errormsg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.STATUS)
}

::google::protobuf::uint8* STATUS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.STATUS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 statusCode = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statuscode(), target);
  }

  // optional int64 subcode = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->subcode(), target);
  }

  // optional string errorName = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errorname().data(), static_cast<int>(this->errorname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.STATUS.errorName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errorname(), target);
  }

  // optional string errorMsg = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->errormsg().data(), static_cast<int>(this->errormsg().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.STATUS.errorMsg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->errormsg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.STATUS)
  return target;
}

size_t STATUS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.STATUS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string errorName = 3;
    if (has_errorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorname());
    }

    // optional string errorMsg = 4;
    if (has_errormsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errormsg());
    }

    // optional int64 subcode = 2;
    if (has_subcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->subcode());
    }

    // optional int32 statusCode = 1;
    if (has_statuscode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statuscode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void STATUS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  const STATUS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const STATUS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.STATUS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.STATUS)
    MergeFrom(*source);
  }
}

void STATUS::MergeFrom(const STATUS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.STATUS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_errorname();
      errorname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errorname_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_errormsg();
      errormsg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errormsg_);
    }
    if (cached_has_bits & 0x00000004u) {
      subcode_ = from.subcode_;
    }
    if (cached_has_bits & 0x00000008u) {
      statuscode_ = from.statuscode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void STATUS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void STATUS::CopyFrom(const STATUS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.STATUS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool STATUS::IsInitialized() const {
  return true;
}

void STATUS::Swap(STATUS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void STATUS::InternalSwap(STATUS* other) {
  using std::swap;
  errorname_.Swap(&other->errorname_);
  errormsg_.Swap(&other->errormsg_);
  swap(subcode_, other->subcode_);
  swap(statuscode_, other->statuscode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata STATUS::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CAPABILITY::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CAPABILITY::kMessageNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CAPABILITY::CAPABILITY()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsCAPABILITY();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.CAPABILITY)
}
CAPABILITY::CAPABILITY(const CAPABILITY& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      messagename_(from.messagename_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SIMPLE.CAPABILITY)
}

void CAPABILITY::SharedCtor() {
  _cached_size_ = 0;
}

CAPABILITY::~CAPABILITY() {
  // @@protoc_insertion_point(destructor:SIMPLE.CAPABILITY)
  SharedDtor();
}

void CAPABILITY::SharedDtor() {
}

void CAPABILITY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CAPABILITY::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CAPABILITY& CAPABILITY::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsCAPABILITY();
  return *internal_default_instance();
}

CAPABILITY* CAPABILITY::New(::google::protobuf::Arena* arena) const {
  CAPABILITY* n = new CAPABILITY;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CAPABILITY::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.CAPABILITY)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messagename_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CAPABILITY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.CAPABILITY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string messageName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_messagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagename(this->messagename_size() - 1).data(),
            static_cast<int>(this->messagename(this->messagename_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SIMPLE.CAPABILITY.messageName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.CAPABILITY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.CAPABILITY)
  return false;
#undef DO_
}

void CAPABILITY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.CAPABILITY)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messageName = 1;
  for (int i = 0, n = this->messagename_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagename(i).data(), static_cast<int>(this->messagename(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.CAPABILITY.messageName");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messagename(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.CAPABILITY)
}

::google::protobuf::uint8* CAPABILITY::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.CAPABILITY)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messageName = 1;
  for (int i = 0, n = this->messagename_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagename(i).data(), static_cast<int>(this->messagename(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SIMPLE.CAPABILITY.messageName");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->messagename(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.CAPABILITY)
  return target;
}

size_t CAPABILITY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.CAPABILITY)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string messageName = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->messagename_size());
  for (int i = 0, n = this->messagename_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->messagename(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CAPABILITY::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.CAPABILITY)
  GOOGLE_DCHECK_NE(&from, this);
  const CAPABILITY* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CAPABILITY>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.CAPABILITY)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.CAPABILITY)
    MergeFrom(*source);
  }
}

void CAPABILITY::MergeFrom(const CAPABILITY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.CAPABILITY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messagename_.MergeFrom(from.messagename_);
}

void CAPABILITY::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.CAPABILITY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CAPABILITY::CopyFrom(const CAPABILITY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.CAPABILITY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CAPABILITY::IsInitialized() const {
  return true;
}

void CAPABILITY::Swap(CAPABILITY* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CAPABILITY::InternalSwap(CAPABILITY* other) {
  using std::swap;
  messagename_.InternalSwap(&other->messagename_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CAPABILITY::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Pos::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pos::kPxFieldNumber;
const int Pos::kPyFieldNumber;
const int Pos::kPzFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pos::Pos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsPos();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.Pos)
}
Pos::Pos(const Pos& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&px_, &from.px_,
    static_cast<size_t>(reinterpret_cast<char*>(&pz_) -
    reinterpret_cast<char*>(&px_)) + sizeof(pz_));
  // @@protoc_insertion_point(copy_constructor:SIMPLE.Pos)
}

void Pos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&px_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pz_) -
      reinterpret_cast<char*>(&px_)) + sizeof(pz_));
}

Pos::~Pos() {
  // @@protoc_insertion_point(destructor:SIMPLE.Pos)
  SharedDtor();
}

void Pos::SharedDtor() {
}

void Pos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pos::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Pos& Pos::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsPos();
  return *internal_default_instance();
}

Pos* Pos::New(::google::protobuf::Arena* arena) const {
  Pos* n = new Pos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pos::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.Pos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&px_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pz_) -
        reinterpret_cast<char*>(&px_)) + sizeof(pz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Pos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.Pos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double px = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_px();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double py = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_py();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &py_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pz = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_pz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.Pos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.Pos)
  return false;
#undef DO_
}

void Pos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.Pos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double px = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->px(), output);
  }

  // optional double py = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->py(), output);
  }

  // optional double pz = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.Pos)
}

::google::protobuf::uint8* Pos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.Pos)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double px = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->px(), target);
  }

  // optional double py = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->py(), target);
  }

  // optional double pz = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.Pos)
  return target;
}

size_t Pos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.Pos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double px = 1;
    if (has_px()) {
      total_size += 1 + 8;
    }

    // optional double py = 2;
    if (has_py()) {
      total_size += 1 + 8;
    }

    // optional double pz = 3;
    if (has_pz()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  const Pos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Pos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.Pos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.Pos)
    MergeFrom(*source);
  }
}

void Pos::MergeFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.Pos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      px_ = from.px_;
    }
    if (cached_has_bits & 0x00000002u) {
      py_ = from.py_;
    }
    if (cached_has_bits & 0x00000004u) {
      pz_ = from.pz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Pos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pos::CopyFrom(const Pos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.Pos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pos::IsInitialized() const {
  return true;
}

void Pos::Swap(Pos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pos::InternalSwap(Pos* other) {
  using std::swap;
  swap(px_, other->px_);
  swap(py_, other->py_);
  swap(pz_, other->pz_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pos::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Orientation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Orientation::kR11FieldNumber;
const int Orientation::kR12FieldNumber;
const int Orientation::kR13FieldNumber;
const int Orientation::kR21FieldNumber;
const int Orientation::kR22FieldNumber;
const int Orientation::kR23FieldNumber;
const int Orientation::kR31FieldNumber;
const int Orientation::kR32FieldNumber;
const int Orientation::kR33FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Orientation::Orientation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsOrientation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r11_, &from.r11_,
    static_cast<size_t>(reinterpret_cast<char*>(&r33_) -
    reinterpret_cast<char*>(&r11_)) + sizeof(r33_));
  // @@protoc_insertion_point(copy_constructor:SIMPLE.Orientation)
}

void Orientation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&r11_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&r33_) -
      reinterpret_cast<char*>(&r11_)) + sizeof(r33_));
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:SIMPLE.Orientation)
  SharedDtor();
}

void Orientation::SharedDtor() {
}

void Orientation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Orientation::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Orientation& Orientation::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsOrientation();
  return *internal_default_instance();
}

Orientation* Orientation::New(::google::protobuf::Arena* arena) const {
  Orientation* n = new Orientation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.Orientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&r11_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&r32_) -
        reinterpret_cast<char*>(&r11_)) + sizeof(r32_));
  }
  r33_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Orientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.Orientation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double r11 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_r11();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double r12 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_r12();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r12_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double r13 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_r13();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r13_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double r21 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_r21();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r21_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double r22 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_r22();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r22_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double r23 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_r23();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r23_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double r31 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {
          set_has_r31();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r31_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double r32 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {
          set_has_r32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double r33 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {
          set_has_r33();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &r33_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.Orientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.Orientation)
  return false;
#undef DO_
}

void Orientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.Orientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double r11 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->r11(), output);
  }

  // optional double r12 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->r12(), output);
  }

  // optional double r13 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->r13(), output);
  }

  // optional double r21 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->r21(), output);
  }

  // optional double r22 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->r22(), output);
  }

  // optional double r23 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->r23(), output);
  }

  // optional double r31 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->r31(), output);
  }

  // optional double r32 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->r32(), output);
  }

  // optional double r33 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->r33(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.Orientation)
}

::google::protobuf::uint8* Orientation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.Orientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double r11 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->r11(), target);
  }

  // optional double r12 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->r12(), target);
  }

  // optional double r13 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->r13(), target);
  }

  // optional double r21 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->r21(), target);
  }

  // optional double r22 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->r22(), target);
  }

  // optional double r23 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->r23(), target);
  }

  // optional double r31 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->r31(), target);
  }

  // optional double r32 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->r32(), target);
  }

  // optional double r33 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->r33(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.Orientation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional double r11 = 1;
    if (has_r11()) {
      total_size += 1 + 8;
    }

    // optional double r12 = 2;
    if (has_r12()) {
      total_size += 1 + 8;
    }

    // optional double r13 = 3;
    if (has_r13()) {
      total_size += 1 + 8;
    }

    // optional double r21 = 4;
    if (has_r21()) {
      total_size += 1 + 8;
    }

    // optional double r22 = 5;
    if (has_r22()) {
      total_size += 1 + 8;
    }

    // optional double r23 = 6;
    if (has_r23()) {
      total_size += 1 + 8;
    }

    // optional double r31 = 7;
    if (has_r31()) {
      total_size += 1 + 8;
    }

    // optional double r32 = 8;
    if (has_r32()) {
      total_size += 1 + 8;
    }

  }
  // optional double r33 = 9;
  if (has_r33()) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Orientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  const Orientation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Orientation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.Orientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.Orientation)
    MergeFrom(*source);
  }
}

void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      r11_ = from.r11_;
    }
    if (cached_has_bits & 0x00000002u) {
      r12_ = from.r12_;
    }
    if (cached_has_bits & 0x00000004u) {
      r13_ = from.r13_;
    }
    if (cached_has_bits & 0x00000008u) {
      r21_ = from.r21_;
    }
    if (cached_has_bits & 0x00000010u) {
      r22_ = from.r22_;
    }
    if (cached_has_bits & 0x00000020u) {
      r23_ = from.r23_;
    }
    if (cached_has_bits & 0x00000040u) {
      r31_ = from.r31_;
    }
    if (cached_has_bits & 0x00000080u) {
      r32_ = from.r32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_r33(from.r33());
  }
}

void Orientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  return true;
}

void Orientation::Swap(Orientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  swap(r11_, other->r11_);
  swap(r12_, other->r12_);
  swap(r13_, other->r13_);
  swap(r21_, other->r21_);
  swap(r22_, other->r22_);
  swap(r23_, other->r23_);
  swap(r31_, other->r31_);
  swap(r32_, other->r32_);
  swap(r33_, other->r33_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Orientation::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Quaternion::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kQiFieldNumber;
const int Quaternion::kQjFieldNumber;
const int Quaternion::kQkFieldNumber;
const int Quaternion::kQrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsQuaternion();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qi_, &from.qi_,
    static_cast<size_t>(reinterpret_cast<char*>(&qr_) -
    reinterpret_cast<char*>(&qi_)) + sizeof(qr_));
  // @@protoc_insertion_point(copy_constructor:SIMPLE.Quaternion)
}

void Quaternion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&qi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qr_) -
      reinterpret_cast<char*>(&qi_)) + sizeof(qr_));
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:SIMPLE.Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Quaternion::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Quaternion& Quaternion::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsQuaternion();
  return *internal_default_instance();
}

Quaternion* Quaternion::New(::google::protobuf::Arena* arena) const {
  Quaternion* n = new Quaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&qi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&qr_) -
        reinterpret_cast<char*>(&qi_)) + sizeof(qr_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.Quaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double qi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_qi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double qj = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_qj();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qj_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double qk = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_qk();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double qr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_qr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.Quaternion)
  return false;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double qi = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->qi(), output);
  }

  // optional double qj = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->qj(), output);
  }

  // optional double qk = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->qk(), output);
  }

  // optional double qr = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->qr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.Quaternion)
}

::google::protobuf::uint8* Quaternion::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double qi = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->qi(), target);
  }

  // optional double qj = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->qj(), target);
  }

  // optional double qk = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->qk(), target);
  }

  // optional double qr = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->qr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.Quaternion)
  return target;
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.Quaternion)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double qi = 1;
    if (has_qi()) {
      total_size += 1 + 8;
    }

    // optional double qj = 2;
    if (has_qj()) {
      total_size += 1 + 8;
    }

    // optional double qk = 3;
    if (has_qk()) {
      total_size += 1 + 8;
    }

    // optional double qr = 4;
    if (has_qr()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternion::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  const Quaternion* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Quaternion>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.Quaternion)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.Quaternion)
    MergeFrom(*source);
  }
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      qi_ = from.qi_;
    }
    if (cached_has_bits & 0x00000002u) {
      qj_ = from.qj_;
    }
    if (cached_has_bits & 0x00000004u) {
      qk_ = from.qk_;
    }
    if (cached_has_bits & 0x00000008u) {
      qr_ = from.qr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Quaternion::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  using std::swap;
  swap(qi_, other->qi_);
  swap(qj_, other->qj_);
  swap(qk_, other->qk_);
  swap(qr_, other->qr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Quaternion::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void POSITION::InitAsDefaultInstance() {
  ::SIMPLE::_POSITION_default_instance_._instance.get_mutable()->position_ = const_cast< ::SIMPLE::Pos*>(
      ::SIMPLE::Pos::internal_default_instance());
  ::SIMPLE::_POSITION_default_instance_._instance.get_mutable()->orient_ = const_cast< ::SIMPLE::Quaternion*>(
      ::SIMPLE::Quaternion::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int POSITION::kPositionFieldNumber;
const int POSITION::kOrientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

POSITION::POSITION()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsPOSITION();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.POSITION)
}
POSITION::POSITION(const POSITION& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::SIMPLE::Pos(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_orient()) {
    orient_ = new ::SIMPLE::Quaternion(*from.orient_);
  } else {
    orient_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SIMPLE.POSITION)
}

void POSITION::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orient_) -
      reinterpret_cast<char*>(&position_)) + sizeof(orient_));
}

POSITION::~POSITION() {
  // @@protoc_insertion_point(destructor:SIMPLE.POSITION)
  SharedDtor();
}

void POSITION::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orient_;
}

void POSITION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POSITION::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const POSITION& POSITION::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsPOSITION();
  return *internal_default_instance();
}

POSITION* POSITION::New(::google::protobuf::Arena* arena) const {
  POSITION* n = new POSITION;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void POSITION::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.POSITION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::SIMPLE::Pos::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orient_ != NULL);
      orient_->::SIMPLE::Quaternion::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool POSITION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.POSITION)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SIMPLE.Pos position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.Quaternion orient = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.POSITION)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.POSITION)
  return false;
#undef DO_
}

void POSITION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.POSITION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SIMPLE.Pos position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional .SIMPLE.Quaternion orient = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orient_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.POSITION)
}

::google::protobuf::uint8* POSITION::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.POSITION)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SIMPLE.Pos position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, deterministic, target);
  }

  // optional .SIMPLE.Quaternion orient = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orient_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.POSITION)
  return target;
}

size_t POSITION::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.POSITION)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SIMPLE.Pos position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .SIMPLE.Quaternion orient = 2;
    if (has_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orient_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POSITION::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.POSITION)
  GOOGLE_DCHECK_NE(&from, this);
  const POSITION* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const POSITION>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.POSITION)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.POSITION)
    MergeFrom(*source);
  }
}

void POSITION::MergeFrom(const POSITION& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.POSITION)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::SIMPLE::Pos::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orient()->::SIMPLE::Quaternion::MergeFrom(from.orient());
    }
  }
}

void POSITION::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POSITION::CopyFrom(const POSITION& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.POSITION)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POSITION::IsInitialized() const {
  return true;
}

void POSITION::Swap(POSITION* other) {
  if (other == this) return;
  InternalSwap(other);
}
void POSITION::InternalSwap(POSITION* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(orient_, other->orient_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata POSITION::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TRANSFORM::InitAsDefaultInstance() {
  ::SIMPLE::_TRANSFORM_default_instance_._instance.get_mutable()->position_ = const_cast< ::SIMPLE::Pos*>(
      ::SIMPLE::Pos::internal_default_instance());
  ::SIMPLE::_TRANSFORM_default_instance_._instance.get_mutable()->orient_ = const_cast< ::SIMPLE::Orientation*>(
      ::SIMPLE::Orientation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TRANSFORM::kPositionFieldNumber;
const int TRANSFORM::kOrientFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TRANSFORM::TRANSFORM()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsTRANSFORM();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.TRANSFORM)
}
TRANSFORM::TRANSFORM(const TRANSFORM& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::SIMPLE::Pos(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_orient()) {
    orient_ = new ::SIMPLE::Orientation(*from.orient_);
  } else {
    orient_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SIMPLE.TRANSFORM)
}

void TRANSFORM::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orient_) -
      reinterpret_cast<char*>(&position_)) + sizeof(orient_));
}

TRANSFORM::~TRANSFORM() {
  // @@protoc_insertion_point(destructor:SIMPLE.TRANSFORM)
  SharedDtor();
}

void TRANSFORM::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orient_;
}

void TRANSFORM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TRANSFORM::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TRANSFORM& TRANSFORM::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsTRANSFORM();
  return *internal_default_instance();
}

TRANSFORM* TRANSFORM::New(::google::protobuf::Arena* arena) const {
  TRANSFORM* n = new TRANSFORM;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TRANSFORM::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.TRANSFORM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::SIMPLE::Pos::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orient_ != NULL);
      orient_->::SIMPLE::Orientation::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TRANSFORM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.TRANSFORM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SIMPLE.Pos position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.Orientation orient = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.TRANSFORM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.TRANSFORM)
  return false;
#undef DO_
}

void TRANSFORM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.TRANSFORM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SIMPLE.Pos position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional .SIMPLE.Orientation orient = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orient_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.TRANSFORM)
}

::google::protobuf::uint8* TRANSFORM::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.TRANSFORM)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SIMPLE.Pos position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, deterministic, target);
  }

  // optional .SIMPLE.Orientation orient = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orient_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.TRANSFORM)
  return target;
}

size_t TRANSFORM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.TRANSFORM)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SIMPLE.Pos position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .SIMPLE.Orientation orient = 2;
    if (has_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orient_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TRANSFORM::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.TRANSFORM)
  GOOGLE_DCHECK_NE(&from, this);
  const TRANSFORM* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TRANSFORM>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.TRANSFORM)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.TRANSFORM)
    MergeFrom(*source);
  }
}

void TRANSFORM::MergeFrom(const TRANSFORM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.TRANSFORM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::SIMPLE::Pos::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orient()->::SIMPLE::Orientation::MergeFrom(from.orient());
    }
  }
}

void TRANSFORM::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.TRANSFORM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TRANSFORM::CopyFrom(const TRANSFORM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.TRANSFORM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TRANSFORM::IsInitialized() const {
  return true;
}

void TRANSFORM::Swap(TRANSFORM* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TRANSFORM::InternalSwap(TRANSFORM* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(orient_, other->orient_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TRANSFORM::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMAGE_METRICS::InitAsDefaultInstance() {
  ::SIMPLE::_IMAGE_METRICS_default_instance_._instance.get_mutable()->position_ = const_cast< ::SIMPLE::Pos*>(
      ::SIMPLE::Pos::internal_default_instance());
  ::SIMPLE::_IMAGE_METRICS_default_instance_._instance.get_mutable()->orient_ = const_cast< ::SIMPLE::Orientation*>(
      ::SIMPLE::Orientation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMAGE_METRICS::kVoxelSizeFieldNumber;
const int IMAGE_METRICS::kCOSFieldNumber;
const int IMAGE_METRICS::kPositionFieldNumber;
const int IMAGE_METRICS::kOrientFieldNumber;
const int IMAGE_METRICS::kMatrixSizeXFieldNumber;
const int IMAGE_METRICS::kMatrixSizeYFieldNumber;
const int IMAGE_METRICS::kMatrixSizeZFieldNumber;
const int IMAGE_METRICS::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMAGE_METRICS::IMAGE_METRICS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsIMAGE_METRICS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.IMAGE.METRICS)
}
IMAGE_METRICS::IMAGE_METRICS(const IMAGE_METRICS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::SIMPLE::Pos(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_orient()) {
    orient_ = new ::SIMPLE::Orientation(*from.orient_);
  } else {
    orient_ = NULL;
  }
  ::memcpy(&voxelsize_, &from.voxelsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&voxelsize_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SIMPLE.IMAGE.METRICS)
}

void IMAGE_METRICS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&position_)) + sizeof(type_));
}

IMAGE_METRICS::~IMAGE_METRICS() {
  // @@protoc_insertion_point(destructor:SIMPLE.IMAGE.METRICS)
  SharedDtor();
}

void IMAGE_METRICS::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete orient_;
}

void IMAGE_METRICS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMAGE_METRICS::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMAGE_METRICS& IMAGE_METRICS::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsIMAGE_METRICS();
  return *internal_default_instance();
}

IMAGE_METRICS* IMAGE_METRICS::New(::google::protobuf::Arena* arena) const {
  IMAGE_METRICS* n = new IMAGE_METRICS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMAGE_METRICS::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.IMAGE.METRICS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::SIMPLE::Pos::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(orient_ != NULL);
      orient_->::SIMPLE::Orientation::Clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&voxelsize_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&voxelsize_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IMAGE_METRICS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.IMAGE.METRICS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double voxelSize = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_voxelsize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voxelsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.IMAGE.METRICS.COStype COS = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SIMPLE::IMAGE_METRICS_COStype_IsValid(value)) {
            set_cos(static_cast< ::SIMPLE::IMAGE_METRICS_COStype >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.Pos position = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.Orientation orient = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 matrixSizeX = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_matrixsizex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matrixsizex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 matrixSizeY = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_matrixsizey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matrixsizey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 matrixSizeZ = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_matrixsizez();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matrixsizez_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.IMAGE.METRICS.dataType type = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SIMPLE::IMAGE_METRICS_dataType_IsValid(value)) {
            set_type(static_cast< ::SIMPLE::IMAGE_METRICS_dataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.IMAGE.METRICS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.IMAGE.METRICS)
  return false;
#undef DO_
}

void IMAGE_METRICS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.IMAGE.METRICS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double voxelSize = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->voxelsize(), output);
  }

  // optional .SIMPLE.IMAGE.METRICS.COStype COS = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cos(), output);
  }

  // optional .SIMPLE.Pos position = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->position_, output);
  }

  // optional .SIMPLE.Orientation orient = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->orient_, output);
  }

  // optional int32 matrixSizeX = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->matrixsizex(), output);
  }

  // optional int32 matrixSizeY = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->matrixsizey(), output);
  }

  // optional int32 matrixSizeZ = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->matrixsizez(), output);
  }

  // optional .SIMPLE.IMAGE.METRICS.dataType type = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.IMAGE.METRICS)
}

::google::protobuf::uint8* IMAGE_METRICS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.IMAGE.METRICS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double voxelSize = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->voxelsize(), target);
  }

  // optional .SIMPLE.IMAGE.METRICS.COStype COS = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cos(), target);
  }

  // optional .SIMPLE.Pos position = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->position_, deterministic, target);
  }

  // optional .SIMPLE.Orientation orient = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->orient_, deterministic, target);
  }

  // optional int32 matrixSizeX = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->matrixsizex(), target);
  }

  // optional int32 matrixSizeY = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->matrixsizey(), target);
  }

  // optional int32 matrixSizeZ = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->matrixsizez(), target);
  }

  // optional .SIMPLE.IMAGE.METRICS.dataType type = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.IMAGE.METRICS)
  return target;
}

size_t IMAGE_METRICS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.IMAGE.METRICS)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .SIMPLE.Pos position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .SIMPLE.Orientation orient = 4;
    if (has_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orient_);
    }

    // optional double voxelSize = 1;
    if (has_voxelsize()) {
      total_size += 1 + 8;
    }

    // optional .SIMPLE.IMAGE.METRICS.COStype COS = 2;
    if (has_cos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->cos());
    }

    // optional int32 matrixSizeX = 5;
    if (has_matrixsizex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matrixsizex());
    }

    // optional int32 matrixSizeY = 6;
    if (has_matrixsizey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matrixsizey());
    }

    // optional int32 matrixSizeZ = 7;
    if (has_matrixsizez()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->matrixsizez());
    }

    // optional .SIMPLE.IMAGE.METRICS.dataType type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAGE_METRICS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.IMAGE.METRICS)
  GOOGLE_DCHECK_NE(&from, this);
  const IMAGE_METRICS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMAGE_METRICS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.IMAGE.METRICS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.IMAGE.METRICS)
    MergeFrom(*source);
  }
}

void IMAGE_METRICS::MergeFrom(const IMAGE_METRICS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.IMAGE.METRICS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::SIMPLE::Pos::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orient()->::SIMPLE::Orientation::MergeFrom(from.orient());
    }
    if (cached_has_bits & 0x00000004u) {
      voxelsize_ = from.voxelsize_;
    }
    if (cached_has_bits & 0x00000008u) {
      cos_ = from.cos_;
    }
    if (cached_has_bits & 0x00000010u) {
      matrixsizex_ = from.matrixsizex_;
    }
    if (cached_has_bits & 0x00000020u) {
      matrixsizey_ = from.matrixsizey_;
    }
    if (cached_has_bits & 0x00000040u) {
      matrixsizez_ = from.matrixsizez_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IMAGE_METRICS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.IMAGE.METRICS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMAGE_METRICS::CopyFrom(const IMAGE_METRICS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.IMAGE.METRICS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAGE_METRICS::IsInitialized() const {
  return true;
}

void IMAGE_METRICS::Swap(IMAGE_METRICS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMAGE_METRICS::InternalSwap(IMAGE_METRICS* other) {
  using std::swap;
  swap(position_, other->position_);
  swap(orient_, other->orient_);
  swap(voxelsize_, other->voxelsize_);
  swap(cos_, other->cos_);
  swap(matrixsizex_, other->matrixsizex_);
  swap(matrixsizey_, other->matrixsizey_);
  swap(matrixsizez_, other->matrixsizez_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMAGE_METRICS::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMAGE_SUBVOLUME::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMAGE_SUBVOLUME::kCornerVoxelIdxXFieldNumber;
const int IMAGE_SUBVOLUME::kCornerVoxelIdxYFieldNumber;
const int IMAGE_SUBVOLUME::kCornerVoxelIdxZFieldNumber;
const int IMAGE_SUBVOLUME::kNumVoxelXFieldNumber;
const int IMAGE_SUBVOLUME::kNumVoxelYFieldNumber;
const int IMAGE_SUBVOLUME::kNumVoxelZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMAGE_SUBVOLUME::IMAGE_SUBVOLUME()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsIMAGE_SUBVOLUME();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.IMAGE.SUBVOLUME)
}
IMAGE_SUBVOLUME::IMAGE_SUBVOLUME(const IMAGE_SUBVOLUME& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cornervoxelidxx_, &from.cornervoxelidxx_,
    static_cast<size_t>(reinterpret_cast<char*>(&numvoxelz_) -
    reinterpret_cast<char*>(&cornervoxelidxx_)) + sizeof(numvoxelz_));
  // @@protoc_insertion_point(copy_constructor:SIMPLE.IMAGE.SUBVOLUME)
}

void IMAGE_SUBVOLUME::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cornervoxelidxx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&numvoxelz_) -
      reinterpret_cast<char*>(&cornervoxelidxx_)) + sizeof(numvoxelz_));
}

IMAGE_SUBVOLUME::~IMAGE_SUBVOLUME() {
  // @@protoc_insertion_point(destructor:SIMPLE.IMAGE.SUBVOLUME)
  SharedDtor();
}

void IMAGE_SUBVOLUME::SharedDtor() {
}

void IMAGE_SUBVOLUME::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMAGE_SUBVOLUME::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMAGE_SUBVOLUME& IMAGE_SUBVOLUME::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsIMAGE_SUBVOLUME();
  return *internal_default_instance();
}

IMAGE_SUBVOLUME* IMAGE_SUBVOLUME::New(::google::protobuf::Arena* arena) const {
  IMAGE_SUBVOLUME* n = new IMAGE_SUBVOLUME;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMAGE_SUBVOLUME::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.IMAGE.SUBVOLUME)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&cornervoxelidxx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&numvoxelz_) -
        reinterpret_cast<char*>(&cornervoxelidxx_)) + sizeof(numvoxelz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IMAGE_SUBVOLUME::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.IMAGE.SUBVOLUME)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cornerVoxelIdxX = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_cornervoxelidxx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cornervoxelidxx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cornerVoxelIdxY = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_cornervoxelidxy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cornervoxelidxy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cornerVoxelIdxZ = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_cornervoxelidxz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cornervoxelidxz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 numVoxelX = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_numvoxelx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numvoxelx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 numVoxelY = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_numvoxely();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numvoxely_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 numVoxelZ = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_numvoxelz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numvoxelz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.IMAGE.SUBVOLUME)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.IMAGE.SUBVOLUME)
  return false;
#undef DO_
}

void IMAGE_SUBVOLUME::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.IMAGE.SUBVOLUME)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cornerVoxelIdxX = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cornervoxelidxx(), output);
  }

  // optional int32 cornerVoxelIdxY = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cornervoxelidxy(), output);
  }

  // optional int32 cornerVoxelIdxZ = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cornervoxelidxz(), output);
  }

  // optional int32 numVoxelX = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->numvoxelx(), output);
  }

  // optional int32 numVoxelY = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numvoxely(), output);
  }

  // optional int32 numVoxelZ = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->numvoxelz(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.IMAGE.SUBVOLUME)
}

::google::protobuf::uint8* IMAGE_SUBVOLUME::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.IMAGE.SUBVOLUME)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 cornerVoxelIdxX = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cornervoxelidxx(), target);
  }

  // optional int32 cornerVoxelIdxY = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cornervoxelidxy(), target);
  }

  // optional int32 cornerVoxelIdxZ = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cornervoxelidxz(), target);
  }

  // optional int32 numVoxelX = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->numvoxelx(), target);
  }

  // optional int32 numVoxelY = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numvoxely(), target);
  }

  // optional int32 numVoxelZ = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->numvoxelz(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.IMAGE.SUBVOLUME)
  return target;
}

size_t IMAGE_SUBVOLUME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.IMAGE.SUBVOLUME)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 cornerVoxelIdxX = 1;
    if (has_cornervoxelidxx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cornervoxelidxx());
    }

    // optional int32 cornerVoxelIdxY = 2;
    if (has_cornervoxelidxy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cornervoxelidxy());
    }

    // optional int32 cornerVoxelIdxZ = 3;
    if (has_cornervoxelidxz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cornervoxelidxz());
    }

    // optional int32 numVoxelX = 4;
    if (has_numvoxelx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numvoxelx());
    }

    // optional int32 numVoxelY = 5;
    if (has_numvoxely()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numvoxely());
    }

    // optional int32 numVoxelZ = 6;
    if (has_numvoxelz()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numvoxelz());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAGE_SUBVOLUME::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.IMAGE.SUBVOLUME)
  GOOGLE_DCHECK_NE(&from, this);
  const IMAGE_SUBVOLUME* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMAGE_SUBVOLUME>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.IMAGE.SUBVOLUME)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.IMAGE.SUBVOLUME)
    MergeFrom(*source);
  }
}

void IMAGE_SUBVOLUME::MergeFrom(const IMAGE_SUBVOLUME& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.IMAGE.SUBVOLUME)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      cornervoxelidxx_ = from.cornervoxelidxx_;
    }
    if (cached_has_bits & 0x00000002u) {
      cornervoxelidxy_ = from.cornervoxelidxy_;
    }
    if (cached_has_bits & 0x00000004u) {
      cornervoxelidxz_ = from.cornervoxelidxz_;
    }
    if (cached_has_bits & 0x00000008u) {
      numvoxelx_ = from.numvoxelx_;
    }
    if (cached_has_bits & 0x00000010u) {
      numvoxely_ = from.numvoxely_;
    }
    if (cached_has_bits & 0x00000020u) {
      numvoxelz_ = from.numvoxelz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IMAGE_SUBVOLUME::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.IMAGE.SUBVOLUME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMAGE_SUBVOLUME::CopyFrom(const IMAGE_SUBVOLUME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.IMAGE.SUBVOLUME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAGE_SUBVOLUME::IsInitialized() const {
  return true;
}

void IMAGE_SUBVOLUME::Swap(IMAGE_SUBVOLUME* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMAGE_SUBVOLUME::InternalSwap(IMAGE_SUBVOLUME* other) {
  using std::swap;
  swap(cornervoxelidxx_, other->cornervoxelidxx_);
  swap(cornervoxelidxy_, other->cornervoxelidxy_);
  swap(cornervoxelidxz_, other->cornervoxelidxz_);
  swap(numvoxelx_, other->numvoxelx_);
  swap(numvoxely_, other->numvoxely_);
  swap(numvoxelz_, other->numvoxelz_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMAGE_SUBVOLUME::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMAGE_imageArray::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMAGE_imageArray::kDataRedFieldNumber;
const int IMAGE_imageArray::kDataGreenFieldNumber;
const int IMAGE_imageArray::kDataBlueFieldNumber;
const int IMAGE_imageArray::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMAGE_imageArray::IMAGE_imageArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsIMAGE_imageArray();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.IMAGE.imageArray)
}
IMAGE_imageArray::IMAGE_imageArray(const IMAGE_imageArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datared_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_datared()) {
    datared_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datared_);
  }
  datagreen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_datagreen()) {
    datagreen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datagreen_);
  }
  datablue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_datablue()) {
    datablue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datablue_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:SIMPLE.IMAGE.imageArray)
}

void IMAGE_imageArray::SharedCtor() {
  _cached_size_ = 0;
  datared_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datagreen_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datablue_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IMAGE_imageArray::~IMAGE_imageArray() {
  // @@protoc_insertion_point(destructor:SIMPLE.IMAGE.imageArray)
  SharedDtor();
}

void IMAGE_imageArray::SharedDtor() {
  datared_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datagreen_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datablue_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IMAGE_imageArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMAGE_imageArray::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMAGE_imageArray& IMAGE_imageArray::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsIMAGE_imageArray();
  return *internal_default_instance();
}

IMAGE_imageArray* IMAGE_imageArray::New(::google::protobuf::Arena* arena) const {
  IMAGE_imageArray* n = new IMAGE_imageArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMAGE_imageArray::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.IMAGE.imageArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!datared_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*datared_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!datagreen_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*datagreen_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!datablue_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*datablue_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(!data_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*data_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IMAGE_imageArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.IMAGE.imageArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes dataRed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datared()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dataGreen = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datagreen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes dataBlue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_datablue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.IMAGE.imageArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.IMAGE.imageArray)
  return false;
#undef DO_
}

void IMAGE_imageArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.IMAGE.imageArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes dataRed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->datared(), output);
  }

  // optional bytes dataGreen = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->datagreen(), output);
  }

  // optional bytes dataBlue = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->datablue(), output);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.IMAGE.imageArray)
}

::google::protobuf::uint8* IMAGE_imageArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.IMAGE.imageArray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes dataRed = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->datared(), target);
  }

  // optional bytes dataGreen = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->datagreen(), target);
  }

  // optional bytes dataBlue = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->datablue(), target);
  }

  // optional bytes data = 4;
  if (cached_has_bits & 0x00000008u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.IMAGE.imageArray)
  return target;
}

size_t IMAGE_imageArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.IMAGE.imageArray)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes dataRed = 1;
    if (has_datared()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datared());
    }

    // optional bytes dataGreen = 2;
    if (has_datagreen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datagreen());
    }

    // optional bytes dataBlue = 3;
    if (has_datablue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->datablue());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAGE_imageArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.IMAGE.imageArray)
  GOOGLE_DCHECK_NE(&from, this);
  const IMAGE_imageArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMAGE_imageArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.IMAGE.imageArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.IMAGE.imageArray)
    MergeFrom(*source);
  }
}

void IMAGE_imageArray::MergeFrom(const IMAGE_imageArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.IMAGE.imageArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_datared();
      datared_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datared_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_datagreen();
      datagreen_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datagreen_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_datablue();
      datablue_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.datablue_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void IMAGE_imageArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.IMAGE.imageArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMAGE_imageArray::CopyFrom(const IMAGE_imageArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.IMAGE.imageArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAGE_imageArray::IsInitialized() const {
  return true;
}

void IMAGE_imageArray::Swap(IMAGE_imageArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMAGE_imageArray::InternalSwap(IMAGE_imageArray* other) {
  using std::swap;
  datared_.Swap(&other->datared_);
  datagreen_.Swap(&other->datagreen_);
  datablue_.Swap(&other->datablue_);
  data_.Swap(&other->data_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMAGE_imageArray::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IMAGE::InitAsDefaultInstance() {
  ::SIMPLE::_IMAGE_default_instance_._instance.get_mutable()->metric_ = const_cast< ::SIMPLE::IMAGE_METRICS*>(
      ::SIMPLE::IMAGE_METRICS::internal_default_instance());
  ::SIMPLE::_IMAGE_default_instance_._instance.get_mutable()->subvolume_ = const_cast< ::SIMPLE::IMAGE_SUBVOLUME*>(
      ::SIMPLE::IMAGE_SUBVOLUME::internal_default_instance());
  ::SIMPLE::_IMAGE_default_instance_._instance.get_mutable()->imagedata_ = const_cast< ::SIMPLE::IMAGE_imageArray*>(
      ::SIMPLE::IMAGE_imageArray::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IMAGE::kMetricFieldNumber;
const int IMAGE::kSubvolumeFieldNumber;
const int IMAGE::kExistSUBVOLUMEFieldNumber;
const int IMAGE::kImageDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IMAGE::IMAGE()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsIMAGE();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.IMAGE)
}
IMAGE::IMAGE(const IMAGE& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metric()) {
    metric_ = new ::SIMPLE::IMAGE_METRICS(*from.metric_);
  } else {
    metric_ = NULL;
  }
  if (from.has_subvolume()) {
    subvolume_ = new ::SIMPLE::IMAGE_SUBVOLUME(*from.subvolume_);
  } else {
    subvolume_ = NULL;
  }
  if (from.has_imagedata()) {
    imagedata_ = new ::SIMPLE::IMAGE_imageArray(*from.imagedata_);
  } else {
    imagedata_ = NULL;
  }
  existsubvolume_ = from.existsubvolume_;
  // @@protoc_insertion_point(copy_constructor:SIMPLE.IMAGE)
}

void IMAGE::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&metric_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&existsubvolume_) -
      reinterpret_cast<char*>(&metric_)) + sizeof(existsubvolume_));
}

IMAGE::~IMAGE() {
  // @@protoc_insertion_point(destructor:SIMPLE.IMAGE)
  SharedDtor();
}

void IMAGE::SharedDtor() {
  if (this != internal_default_instance()) delete metric_;
  if (this != internal_default_instance()) delete subvolume_;
  if (this != internal_default_instance()) delete imagedata_;
}

void IMAGE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IMAGE::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IMAGE& IMAGE::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsIMAGE();
  return *internal_default_instance();
}

IMAGE* IMAGE::New(::google::protobuf::Arena* arena) const {
  IMAGE* n = new IMAGE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IMAGE::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.IMAGE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(metric_ != NULL);
      metric_->::SIMPLE::IMAGE_METRICS::Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(subvolume_ != NULL);
      subvolume_->::SIMPLE::IMAGE_SUBVOLUME::Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(imagedata_ != NULL);
      imagedata_->::SIMPLE::IMAGE_imageArray::Clear();
    }
  }
  existsubvolume_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IMAGE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.IMAGE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SIMPLE.IMAGE.METRICS metric = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metric()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.IMAGE.SUBVOLUME subvolume = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_subvolume()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool existSUBVOLUME = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_existsubvolume();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &existsubvolume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SIMPLE.IMAGE.imageArray imageData = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.IMAGE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.IMAGE)
  return false;
#undef DO_
}

void IMAGE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.IMAGE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SIMPLE.IMAGE.METRICS metric = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->metric_, output);
  }

  // optional .SIMPLE.IMAGE.SUBVOLUME subvolume = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->subvolume_, output);
  }

  // optional bool existSUBVOLUME = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->existsubvolume(), output);
  }

  // optional .SIMPLE.IMAGE.imageArray imageData = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->imagedata_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.IMAGE)
}

::google::protobuf::uint8* IMAGE::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.IMAGE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SIMPLE.IMAGE.METRICS metric = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->metric_, deterministic, target);
  }

  // optional .SIMPLE.IMAGE.SUBVOLUME subvolume = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->subvolume_, deterministic, target);
  }

  // optional bool existSUBVOLUME = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->existsubvolume(), target);
  }

  // optional .SIMPLE.IMAGE.imageArray imageData = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->imagedata_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.IMAGE)
  return target;
}

size_t IMAGE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.IMAGE)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional .SIMPLE.IMAGE.METRICS metric = 1;
    if (has_metric()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->metric_);
    }

    // optional .SIMPLE.IMAGE.SUBVOLUME subvolume = 2;
    if (has_subvolume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->subvolume_);
    }

    // optional .SIMPLE.IMAGE.imageArray imageData = 4;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->imagedata_);
    }

    // optional bool existSUBVOLUME = 3;
    if (has_existsubvolume()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IMAGE::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.IMAGE)
  GOOGLE_DCHECK_NE(&from, this);
  const IMAGE* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IMAGE>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.IMAGE)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.IMAGE)
    MergeFrom(*source);
  }
}

void IMAGE::MergeFrom(const IMAGE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.IMAGE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_metric()->::SIMPLE::IMAGE_METRICS::MergeFrom(from.metric());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_subvolume()->::SIMPLE::IMAGE_SUBVOLUME::MergeFrom(from.subvolume());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_imagedata()->::SIMPLE::IMAGE_imageArray::MergeFrom(from.imagedata());
    }
    if (cached_has_bits & 0x00000008u) {
      existsubvolume_ = from.existsubvolume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IMAGE::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.IMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IMAGE::CopyFrom(const IMAGE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.IMAGE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IMAGE::IsInitialized() const {
  return true;
}

void IMAGE::Swap(IMAGE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IMAGE::InternalSwap(IMAGE* other) {
  using std::swap;
  swap(metric_, other->metric_);
  swap(subvolume_, other->subvolume_);
  swap(imagedata_, other->imagedata_);
  swap(existsubvolume_, other->existsubvolume_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IMAGE::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GENERIC::InitAsDefaultInstance() {
  ::SIMPLE::_GENERIC_default_instance_.basicbool_ = false;
  ::SIMPLE::_GENERIC_default_instance_.basicint_ = 0;
  ::SIMPLE::_GENERIC_default_instance_.basicfloat_ = 0;
  ::SIMPLE::_GENERIC_default_instance_.basicdouble_ = 0;
  ::SIMPLE::_GENERIC_default_instance_.basicstring_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GENERIC::kBasicBoolFieldNumber;
const int GENERIC::kBasicIntFieldNumber;
const int GENERIC::kBasicFloatFieldNumber;
const int GENERIC::kBasicDoubleFieldNumber;
const int GENERIC::kBasicStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GENERIC::GENERIC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_SIMPLE_2eproto::InitDefaultsGENERIC();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SIMPLE.GENERIC)
}
GENERIC::GENERIC(const GENERIC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kBasicBool: {
      set_basicbool(from.basicbool());
      break;
    }
    case kBasicInt: {
      set_basicint(from.basicint());
      break;
    }
    case kBasicFloat: {
      set_basicfloat(from.basicfloat());
      break;
    }
    case kBasicDouble: {
      set_basicdouble(from.basicdouble());
      break;
    }
    case kBasicString: {
      set_basicstring(from.basicstring());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:SIMPLE.GENERIC)
}

void GENERIC::SharedCtor() {
  _cached_size_ = 0;
  clear_has_data();
}

GENERIC::~GENERIC() {
  // @@protoc_insertion_point(destructor:SIMPLE.GENERIC)
  SharedDtor();
}

void GENERIC::SharedDtor() {
  if (has_data()) {
    clear_data();
  }
}

void GENERIC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GENERIC::descriptor() {
  ::protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GENERIC& GENERIC::default_instance() {
  ::protobuf_SIMPLE_2eproto::InitDefaultsGENERIC();
  return *internal_default_instance();
}

GENERIC* GENERIC::New(::google::protobuf::Arena* arena) const {
  GENERIC* n = new GENERIC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GENERIC::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:SIMPLE.GENERIC)
  switch (data_case()) {
    case kBasicBool: {
      // No need to clear
      break;
    }
    case kBasicInt: {
      // No need to clear
      break;
    }
    case kBasicFloat: {
      // No need to clear
      break;
    }
    case kBasicDouble: {
      // No need to clear
      break;
    }
    case kBasicString: {
      data_.basicstring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void GENERIC::Clear() {
// @@protoc_insertion_point(message_clear_start:SIMPLE.GENERIC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GENERIC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SIMPLE.GENERIC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool basicBool = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &data_.basicbool_)));
          set_has_basicbool();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 basicInt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_.basicint_)));
          set_has_basicint();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float basicFloat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &data_.basicfloat_)));
          set_has_basicfloat();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double basicDouble = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          clear_data();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &data_.basicdouble_)));
          set_has_basicdouble();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string basicString = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_basicstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->basicstring().data(), static_cast<int>(this->basicstring().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SIMPLE.GENERIC.basicString");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SIMPLE.GENERIC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SIMPLE.GENERIC)
  return false;
#undef DO_
}

void GENERIC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SIMPLE.GENERIC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (data_case()) {
    case kBasicBool:
      ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->basicbool(), output);
      break;
    case kBasicInt:
      ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->basicint(), output);
      break;
    case kBasicFloat:
      ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->basicfloat(), output);
      break;
    case kBasicDouble:
      ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->basicdouble(), output);
      break;
    case kBasicString:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->basicstring().data(), static_cast<int>(this->basicstring().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SIMPLE.GENERIC.basicString");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        5, this->basicstring(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SIMPLE.GENERIC)
}

::google::protobuf::uint8* GENERIC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SIMPLE.GENERIC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (data_case()) {
    case kBasicBool:
      target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->basicbool(), target);
      break;
    case kBasicInt:
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->basicint(), target);
      break;
    case kBasicFloat:
      target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->basicfloat(), target);
      break;
    case kBasicDouble:
      target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->basicdouble(), target);
      break;
    case kBasicString:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->basicstring().data(), static_cast<int>(this->basicstring().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "SIMPLE.GENERIC.basicString");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          5, this->basicstring(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SIMPLE.GENERIC)
  return target;
}

size_t GENERIC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SIMPLE.GENERIC)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (data_case()) {
    // optional bool basicBool = 1;
    case kBasicBool: {
      total_size += 1 + 1;
      break;
    }
    // optional int32 basicInt = 2;
    case kBasicInt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->basicint());
      break;
    }
    // optional float basicFloat = 3;
    case kBasicFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional double basicDouble = 4;
    case kBasicDouble: {
      total_size += 1 + 8;
      break;
    }
    // optional string basicString = 5;
    case kBasicString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->basicstring());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GENERIC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SIMPLE.GENERIC)
  GOOGLE_DCHECK_NE(&from, this);
  const GENERIC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GENERIC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SIMPLE.GENERIC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SIMPLE.GENERIC)
    MergeFrom(*source);
  }
}

void GENERIC::MergeFrom(const GENERIC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SIMPLE.GENERIC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kBasicBool: {
      set_basicbool(from.basicbool());
      break;
    }
    case kBasicInt: {
      set_basicint(from.basicint());
      break;
    }
    case kBasicFloat: {
      set_basicfloat(from.basicfloat());
      break;
    }
    case kBasicDouble: {
      set_basicdouble(from.basicdouble());
      break;
    }
    case kBasicString: {
      set_basicstring(from.basicstring());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void GENERIC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SIMPLE.GENERIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GENERIC::CopyFrom(const GENERIC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SIMPLE.GENERIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GENERIC::IsInitialized() const {
  return true;
}

void GENERIC::Swap(GENERIC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GENERIC::InternalSwap(GENERIC* other) {
  using std::swap;
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GENERIC::GetMetadata() const {
  protobuf_SIMPLE_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_SIMPLE_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace SIMPLE

// @@protoc_insertion_point(global_scope)
